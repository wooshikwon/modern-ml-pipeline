Classification:
  - class_path: "sklearn.ensemble.RandomForestClassifier"
    description: "Random Forest Classifier from scikit-learn."
    library: "scikit-learn"
    hyperparameters:
      # 고정 파라미터 (모든 환경 동일)
      fixed:
        random_state: 42
      # Optuna 최적화 대상 파라미터 (범위 지정)
      tunable:
        n_estimators:
          type: "int"
          range: [10, 200]
          default: 100
        max_depth:
          type: "int" 
          range: [3, 20]
          default: 10
        min_samples_split:
          type: "int"
          range: [2, 20] 
          default: 2
        min_samples_leaf:
          type: "int"
          range: [1, 10]
          default: 1
      # 환경별 기본값
      environment_defaults:
        local:
          n_estimators: 10
          max_depth: 3
          n_jobs: 2
        dev:
          n_estimators: 50
          max_depth: 10
          n_jobs: 4
        prod:
          n_estimators: 100
          max_depth: 15
          n_jobs: -1
    # 지원 태스크 및 요구사항
    supported_tasks: ["binary_classification", "multiclass_classification"]
    feature_requirements:
      numerical: true
      categorical: true
      text: false
  - class_path: "sklearn.linear_model.LogisticRegression"
    description: "Logistic Regression from scikit-learn."
    library: "scikit-learn"
    hyperparameters:
      fixed:
        random_state: 42
        max_iter: 1000
      tunable:
        C:
          type: "float"
          range: [0.001, 100.0]
          default: 1.0
        penalty:
          type: "categorical"
          range: ["l1", "l2", "elasticnet", "none"]
          default: "l2"
        solver:
          type: "categorical"
          range: ["liblinear", "lbfgs", "newton-cg", "sag", "saga"]
          default: "lbfgs"
      environment_defaults:
        local:
          C: 1.0
          penalty: "l2"
          solver: "lbfgs"
        dev:
          C: 1.0
          penalty: "l2"
          solver: "lbfgs"
        prod:
          C: 1.0
          penalty: "l2"
          solver: "saga"
    supported_tasks: ["binary_classification", "multiclass_classification"]
    feature_requirements:
      numerical: true
      categorical: true
      text: false
  - class_path: "xgboost.XGBClassifier"
    description: "XGBoost Classifier."
    library: "xgboost"
  - class_path: "lightgbm.LGBMClassifier"
    description: "LightGBM Classifier."
    library: "lightgbm"
  - class_path: "catboost.CatBoostClassifier"
    description: "CatBoost Classifier."
    library: "catboost"
  - class_path: "sklearn.svm.SVC"
    description: "Support Vector Machine Classifier from scikit-learn."
    library: "scikit-learn"
  - class_path: "sklearn.naive_bayes.GaussianNB"
    description: "Gaussian Naive Bayes Classifier from scikit-learn."
    library: "scikit-learn"
  - class_path: "sklearn.neighbors.KNeighborsClassifier"
    description: "K-Nearest Neighbors Classifier from scikit-learn."
    library: "scikit-learn"
  - class_path: "pytorch_tabnet.tab_model.TabNetClassifier"
    description: "TabNet Classifier for tabular data from pytorch-tabnet."
    library: "pytorch-tabnet"

Regression:
  - class_path: "sklearn.linear_model.LinearRegression"
    description: "Linear Regression from scikit-learn."
    library: "scikit-learn"
  - class_path: "sklearn.linear_model.Ridge"
    description: "Ridge Regression with L2 regularization."
    library: "scikit-learn"
  - class_path: "sklearn.linear_model.Lasso"
    description: "Lasso Regression with L1 regularization for feature selection."
    library: "scikit-learn"
  - class_path: "sklearn.ensemble.RandomForestRegressor"
    description: "Random Forest Regressor from scikit-learn."
    library: "scikit-learn"
  - class_path: "xgboost.XGBRegressor"
    description: "XGBoost Regressor."
    library: "xgboost"
  - class_path: "lightgbm.LGBMRegressor"
    description: "LightGBM Regressor."
    library: "lightgbm"
  - class_path: "sklearn.svm.SVR"
    description: "Support Vector Regressor from scikit-learn."
    library: "scikit-learn"
  - class_path: "sklearn.linear_model.ElasticNet"
    description: "Elastic Net Regression combining L1 and L2 regularization."
    library: "scikit-learn"
  - class_path: "sklearn.neighbors.KNeighborsRegressor"
    description: "K-Nearest Neighbors Regressor from scikit-learn."
    library: "scikit-learn"
  - class_path: "rtdl_revisiting_models.ResNetRegressor"
    description: "ResNet-like model for tabular data from RTDL."
    library: "rtdl_revisiting_models"
  - class_path: "pytorch_tabnet.tab_model.TabNetRegressor"
    description: "TabNet Regressor for tabular data from pytorch-tabnet."
    library: "pytorch-tabnet"

Deep Learning (Tabular):
  - class_path: "src.models.FTTransformerClassifier"
    description: "FT-Transformer for classification tasks, with built-in preprocessing."
    library: "rtdl_revisiting_models"
  - class_path: "src.models.FTTransformerRegressor"
    description: "FT-Transformer for regression tasks, with built-in preprocessing."
    library: "rtdl_revisiting_models"

Clustering:
  - class_path: "sklearn.cluster.KMeans"
    description: "K-Means Clustering from scikit-learn."
    library: "scikit-learn"
  - class_path: "sklearn.cluster.DBSCAN"
    description: "DBSCAN Clustering from scikit-learn."
    library: "scikit-learn"
  - class_path: "sklearn.cluster.AgglomerativeClustering"
    description: "Hierarchical Agglomerative Clustering from scikit-learn."
    library: "scikit-learn"

Causal:
  - class_path: "causalml.inference.tree.CausalRandomForestRegressor"
    description: "Causal Random Forest for Uplift Modeling."
    library: "causalml"
  - class_path: "causalml.inference.meta.XGBTRegressor"
    description: "XGBoost T-Learner for Causal Inference."
    library: "causalml"
  - class_path: "causalml.inference.meta.SRegressor"
    description: "S-Learner (Single Model) for Causal Inference."
    library: "causalml"
  - class_path: "causalml.inference.meta.TRegressor"
    description: "T-Learner (Two Models) for Causal Inference."
    library: "causalml" 