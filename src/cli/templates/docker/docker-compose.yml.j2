version: '3.8'

# {{ project_name }} - Optimized Docker Compose Configuration
# Generated by Modern ML Pipeline

services:
  ###########################################
  # ML Application Services (Core)
  ###########################################

  # API Serving (Production-Ready)
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
      cache_from:
        - {{ project_name }}:api
    image: {{ project_name }}:api-${VERSION:-latest}
    container_name: {{ project_name }}_api
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      # Read-only mounts for security
      - ./configs:/app/configs:ro
      - ./mlruns:/app/mlruns:ro
      # Writable for logs
      - api_logs:/app/logs
    environment:
      # Model Configuration
      MODEL_RUN_ID: ${MODEL_RUN_ID}
      CONFIG_PATH: ${CONFIG_PATH:-configs/production.yaml}
      
      # MLflow Configuration
      MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI:-./mlruns}
      
      # Database Configuration (if needed)
      DB_HOST: ${DB_HOST:-localhost}
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME:-{{ project_name }}_db}
      
      # API Configuration
      WORKERS: ${API_WORKERS:-4}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Feature Store (if needed)
      FEAST_REPO_PATH: ${FEAST_REPO_PATH:-/app/feature_repo}
      
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '${API_CPU_LIMIT:-2}'
          memory: ${API_MEMORY_LIMIT:-2G}
        reservations:
          cpus: '${API_CPU_RESERVE:-1}'
          memory: ${API_MEMORY_RESERVE:-1G}
    networks:
      - {{ project_name }}_network
    labels:
      - "com.{{ project_name }}.service=api"
      - "com.{{ project_name }}.version=${VERSION:-latest}"

  # Training Service (On-Demand)
  training:
    build:
      context: .
      dockerfile: Dockerfile
      target: training
      cache_from:
        - {{ project_name }}:training
    image: {{ project_name }}:training-${VERSION:-latest}
    container_name: {{ project_name }}_training
    volumes:
      - ./configs:/app/configs:ro
      - ./recipes:/app/recipes:ro
      - ./data:/app/data
      - ./sql:/app/sql:ro
      - ./mlruns:/app/mlruns
      - training_logs:/app/logs
    environment:
      # Training Configuration
      RECIPE_PATH: ${RECIPE_PATH:-recipes/production_model.yaml}
      CONFIG_PATH: ${CONFIG_PATH:-configs/production.yaml}
      TRAIN_DATA_PATH: ${TRAIN_DATA_PATH:-data/train.csv}
      
      # MLflow Configuration
      MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI:-./mlruns}
      MLFLOW_EXPERIMENT_NAME: ${MLFLOW_EXPERIMENT_NAME:-{{ project_name }}_training}
      
      # Database Configuration
      DB_HOST: ${DB_HOST:-localhost}
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME:-{{ project_name }}_db}
      
    deploy:
      resources:
        limits:
          cpus: '${TRAIN_CPU_LIMIT:-4}'
          memory: ${TRAIN_MEMORY_LIMIT:-8G}
    networks:
      - {{ project_name }}_network
    profiles:
      - training  # Only run when explicitly requested
    labels:
      - "com.{{ project_name }}.service=training"
      - "com.{{ project_name }}.version=${VERSION:-latest}"

  # Batch Inference Service (On-Demand)
  inference:
    build:
      context: .
      dockerfile: Dockerfile
      target: inference
      cache_from:
        - {{ project_name }}:inference
    image: {{ project_name }}:inference-${VERSION:-latest}
    container_name: {{ project_name }}_inference
    volumes:
      - ./configs:/app/configs:ro
      - ./data:/app/data
      - ./mlruns:/app/mlruns:ro
      - inference_logs:/app/logs
      - ./artifacts:/app/artifacts
    environment:
      # Inference Configuration
      MODEL_RUN_ID: ${MODEL_RUN_ID}
      CONFIG_PATH: ${CONFIG_PATH:-configs/production.yaml}
      INFERENCE_DATA_PATH: ${INFERENCE_DATA_PATH}
      
      # MLflow Configuration
      MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI:-./mlruns}
      
      # Database Configuration
      DB_HOST: ${DB_HOST:-localhost}
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME:-{{ project_name }}_db}
      
    deploy:
      resources:
        limits:
          cpus: '${INFERENCE_CPU_LIMIT:-2}'
          memory: ${INFERENCE_MEMORY_LIMIT:-4G}
    networks:
      - {{ project_name }}_network
    profiles:
      - inference  # Only run when explicitly requested
    labels:
      - "com.{{ project_name }}.service=inference"
      - "com.{{ project_name }}.version=${VERSION:-latest}"

###########################################
# Optional Infrastructure Services
###########################################

  # MLflow Server (Optional - for centralized tracking)
  mlflow:
    image: python:3.11-slim
    container_name: {{ project_name }}_mlflow
    command: >
      bash -c "
      pip install --no-cache-dir mlflow psycopg2-binary boto3 &&
      mlflow server 
        --backend-store-uri ${MLFLOW_BACKEND_URI:-sqlite:///mlflow.db}
        --default-artifact-root ${MLFLOW_ARTIFACT_ROOT:-/mlruns}
        --host 0.0.0.0
        --port 5000
        --serve-artifacts
      "
    ports:
      - "${MLFLOW_PORT:-5000}:5000"
    volumes:
      - mlflow_data:/mlflow
      - mlflow_artifacts:/mlruns
    environment:
      # AWS S3 Configuration (Optional)
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-1}
    networks:
      - {{ project_name }}_network
    profiles:
      - mlflow  # Optional service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.{{ project_name }}.service=mlflow"

  # PostgreSQL (Optional - for MLflow backend or feature store)
  postgres:
    image: postgres:15-alpine
    container_name: {{ project_name }}_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-{{ project_name }}_db}
      POSTGRES_USER: ${DB_USER:-ml_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - {{ project_name }}_network
    profiles:
      - postgres  # Optional service
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-ml_user} -d ${DB_NAME:-{{ project_name }}_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "com.{{ project_name }}.service=postgres"

###########################################
# Networks & Volumes
###########################################

networks:
  {{ project_name }}_network:
    driver: bridge
    name: {{ project_name }}_network

volumes:
  # Application logs (separate for each service)
  api_logs:
    driver: local
  training_logs:
    driver: local
  inference_logs:
    driver: local
  
  # MLflow artifacts
  mlflow_data:
    driver: local
  mlflow_artifacts:
    driver: local
  
  # Database
  postgres_data:
    driver: local

###########################################
# Usage Instructions
###########################################
# 
# 1. Start API service only:
#    docker-compose up api
#
# 2. Run training:
#    docker-compose --profile training up training
#
# 3. Run batch inference:
#    docker-compose --profile inference up inference
#
# 4. Start with MLflow:
#    docker-compose --profile mlflow up
#
# 5. Full stack with PostgreSQL:
#    docker-compose --profile mlflow --profile postgres up
#
# 6. Build with cache:
#    docker-compose build --build-arg BUILDKIT_INLINE_CACHE=1
#
# 7. Development mode (with override):
#    docker-compose -f docker-compose.yml -f docker-compose.override.yml up