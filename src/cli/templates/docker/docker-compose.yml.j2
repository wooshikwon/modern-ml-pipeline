version: '3.8'

# {{ project_name }} - Complete MLOps Stack
# Generated by Modern ML Pipeline

services:
  ###########################################
  # Core Infrastructure Services
  ###########################################
  
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: {{ project_name }}_postgres
    environment:
      POSTGRES_DB: {{ project_name }}_db
      POSTGRES_USER: ml_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-ml_password}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - {{ project_name }}_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ml_user -d {{ project_name }}_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for caching & session storage)
  redis:
    image: redis:7-alpine
    container_name: {{ project_name }}_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - {{ project_name }}_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # MLflow Tracking Server
  mlflow:
    image: python:3.11-slim
    container_name: {{ project_name }}_mlflow
    command: >
      bash -c "
      pip install mlflow psycopg2-binary &&
      mlflow server 
        --backend-store-uri postgresql://ml_user:${DB_PASSWORD:-ml_password}@postgres:5432/{{ project_name }}_db
        --default-artifact-root /mlruns
        --host 0.0.0.0
        --port 5000
      "
    ports:
      - "5000:5000"
    volumes:
      - mlflow_artifacts:/mlruns
    networks:
      - {{ project_name }}_network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ###########################################
  # ML Application Services
  ###########################################

  # API Serving (Production)
  api:
    build:
      context: .
      target: api
    image: {{ project_name }}:api
    container_name: {{ project_name }}_api
    ports:
      - "8000:8000"
    volumes:
      - ./configs:/app/configs:ro
      - ./recipes:/app/recipes:ro
      - mlflow_artifacts:/app/mlruns:ro
      - ./logs:/app/logs
    environment:
      - PROJECT_NAME={{ project_name }}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MODEL_RUN_ID=${MODEL_RUN_ID}
      - DB_HOST=postgres
      - DB_USER=ml_user
      - DB_PASSWORD=${DB_PASSWORD:-ml_password}
      - DB_NAME={{ project_name }}_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - {{ project_name }}_network
    depends_on:
      mlflow:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2  # 로드 밸런싱을 위한 복제본

  # Training Service (정기 재학습)
  training:
    build:
      context: .
      target: training
    image: {{ project_name }}:training
    container_name: {{ project_name }}_training
    volumes:
      - ./configs:/app/configs:ro
      - ./recipes:/app/recipes:ro
      - ./data:/app/data:ro
      - ./sql:/app/sql:ro
      - mlflow_artifacts:/app/mlruns
      - ./logs:/app/logs
    environment:
      - PROJECT_NAME={{ project_name }}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - TRAIN_DATA_PATH=${TRAIN_DATA_PATH:-data/train.csv}
      - DB_HOST=postgres
      - DB_USER=ml_user
      - DB_PASSWORD=${DB_PASSWORD:-ml_password}
      - DB_NAME={{ project_name }}_db
    networks:
      - {{ project_name }}_network
    depends_on:
      mlflow:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - training  # 수동 실행용 프로파일

  # Batch Inference Service
  inference:
    build:
      context: .
      target: inference
    image: {{ project_name }}:inference
    container_name: {{ project_name }}_inference
    volumes:
      - ./configs:/app/configs:ro
      - ./data:/app/data
      - mlflow_artifacts:/app/mlruns:ro
      - ./logs:/app/logs
      - ./artifacts:/app/artifacts
    environment:
      - PROJECT_NAME={{ project_name }}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MODEL_RUN_ID=${MODEL_RUN_ID}
      - INFERENCE_DATA_PATH=${INFERENCE_DATA_PATH:-data/inference.csv}
      - DB_HOST=postgres
      - DB_USER=ml_user
      - DB_PASSWORD=${DB_PASSWORD:-ml_password}
      - DB_NAME={{ project_name }}_db
    networks:
      - {{ project_name }}_network
    depends_on:
      mlflow:
        condition: service_healthy
    profiles:
      - inference  # 수동 실행용 프로파일

  # Scheduler (정기 작업)
  scheduler:
    build:
      context: .
      target: scheduler
    image: {{ project_name }}:scheduler
    container_name: {{ project_name }}_scheduler
    volumes:
      - ./configs:/app/configs:ro
      - ./recipes:/app/recipes:ro
      - ./data:/app/data
      - ./sql:/app/sql:ro
      - mlflow_artifacts:/app/mlruns
      - ./logs:/app/logs
      - ./artifacts:/app/artifacts
      - ./docker/crontab:/etc/cron.d/ml-pipeline-jobs:ro
    environment:
      - PROJECT_NAME={{ project_name }}
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - DB_HOST=postgres
      - DB_USER=ml_user
      - DB_PASSWORD=${DB_PASSWORD:-ml_password}
      - DB_NAME={{ project_name }}_db
    networks:
      - {{ project_name }}_network
    depends_on:
      mlflow:
        condition: service_healthy
      postgres:
        condition: service_healthy
    profiles:
      - scheduler  # 선택적 실행

  ###########################################
  # Monitoring & Management Services
  ###########################################

  # Nginx Load Balancer (API 로드 밸런싱)
  nginx:
    image: nginx:alpine
    container_name: {{ project_name }}_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/ssl/certs:ro  # SSL 인증서 (있는 경우)
    networks:
      - {{ project_name }}_network
    depends_on:
      - api
    restart: unless-stopped
    profiles:
      - production  # 프로덕션에서만 사용

  # Log Aggregation (선택사항)
  fluentd:
    image: fluent/fluentd:v1.16-1
    container_name: {{ project_name }}_fluentd
    volumes:
      - ./docker/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/ml-pipeline:ro
    networks:
      - {{ project_name }}_network
    profiles:
      - monitoring

###########################################
# Networks & Volumes
###########################################

networks:
  {{ project_name }}_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mlflow_artifacts:
    driver: local

###########################################
# Development Override (docker-compose.override.yml)
###########################################
# For local development, create docker-compose.override.yml:
#
# version: '3.8'
# services:
#   api:
#     volumes:
#       - .:/app  # 코드 핫 리로드
#     environment:
#       - DEBUG=true