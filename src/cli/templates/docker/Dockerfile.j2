# Multi-stage Dockerfile for {{ project_name }}
# Generated by Modern ML Pipeline

###########################################
# Stage 1: Base Python Environment
###########################################
FROM python:3.11-slim as base

# 환경변수 설정
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# 시스템 의존성 설치
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# uv 설치 (고속 패키지 매니저)
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.cargo/bin:$PATH"

WORKDIR /app

###########################################
# Stage 2: Dependencies Installation
###########################################
FROM base as deps

# 프로젝트 메타데이터 복사
COPY pyproject.toml README.md ./

# Python 의존성 설치 (기본 + 모든 선택사항)
RUN uv pip install --system -e ".[all]"

###########################################
# Stage 3: Application Code
###########################################
FROM deps as app

# 애플리케이션 코드 복사
COPY configs/ ./configs/
COPY recipes/ ./recipes/
COPY sql/ ./sql/
COPY data/ ./data/

# MLflow 아티팩트 및 로그 디렉토리 생성
RUN mkdir -p mlruns logs artifacts

# 비root 사용자 생성 (보안)
RUN groupadd -r appgroup && useradd -r -g appgroup appuser
RUN chown -R appuser:appgroup /app
USER appuser

# 환경변수
ENV PROJECT_NAME={{ project_name }}
ENV PYTHONPATH=/app

# 헬스체크 스크립트
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

###########################################
# Stage 4: API Serving (Production)
###########################################
FROM app as api

# API 포트 노출
EXPOSE 8000

# API 서버 실행
CMD ["mmp", "serve-api", \
     "--config-path", "configs/production.yaml", \
     "--host", "0.0.0.0", \
     "--port", "8000"]

###########################################
# Stage 5: Training Job
###########################################
FROM app as training

# 학습 작업 실행
CMD ["mmp", "train", \
     "--recipe-file", "recipes/production_model.yaml", \
     "--config-path", "configs/production.yaml"]

###########################################
# Stage 6: Batch Inference
###########################################
FROM app as inference

# 배치 추론 실행
CMD ["mmp", "batch-inference", \
     "--config-path", "configs/production.yaml", \
     "--run-id", "${MODEL_RUN_ID}", \
     "--data-path", "${INFERENCE_DATA_PATH}"]

###########################################
# Stage 7: Scheduler (Cron Jobs)
###########################################
FROM app as scheduler

# cron 설치
USER root
RUN apt-get update && apt-get install -y cron && rm -rf /var/lib/apt/lists/*

# crontab 설정 복사 (있는 경우)
COPY docker/crontab /etc/cron.d/ml-pipeline-jobs
RUN chmod 0644 /etc/cron.d/ml-pipeline-jobs
RUN crontab /etc/cron.d/ml-pipeline-jobs

# cron 로그 디렉토리
RUN touch /var/log/cron.log

USER appuser

# cron 데몬 실행
CMD ["sh", "-c", "cron && tail -f /var/log/cron.log"]

###########################################
# Default: API Serving
###########################################
FROM api as final