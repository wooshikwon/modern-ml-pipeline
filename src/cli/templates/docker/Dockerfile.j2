# Optimized Multi-stage Dockerfile for {{ project_name }}
# Generated by Modern ML Pipeline
# Features: venv isolation, layer caching, security hardening, size optimization

###########################################
# Stage 1: Base Python Environment (Minimal)
###########################################
FROM python:3.11-slim as base

# 환경변수 설정 (Python 최적화)
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    # venv 경로 설정
    VIRTUAL_ENV=/opt/venv \
    PATH="/opt/venv/bin:$PATH"

# 최소 시스템 의존성만 설치 (런타임용)
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

###########################################
# Stage 2: Builder (컴파일 의존성 포함)
###########################################
FROM base as builder

# 빌드 의존성 설치 (컴파일용)
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    git \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# uv 설치 (고속 패키지 매니저)
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.cargo/bin:$PATH"

# venv 생성
RUN python -m venv $VIRTUAL_ENV

# 프로젝트 메타데이터 복사 (캐싱 최적화)
COPY pyproject.toml README.md ./

# 의존성 설치 (venv 내부)
# 프로덕션용 기본 패키지만 설치 (all 대신 standard 사용)
RUN uv pip install -e ".[standard]"

###########################################
# Stage 3: Runtime Base (공통 런타임)
###########################################
FROM base as runtime

# venv 복사 (builder에서)
COPY --from=builder $VIRTUAL_ENV $VIRTUAL_ENV

# 런타임 의존성만 설치 (postgresql-client 등)
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*

# 비root 사용자 생성 (보안)
RUN groupadd -r mluser && useradd -r -g mluser -d /home/mluser -s /bin/bash mluser

# 애플리케이션 디렉토리 준비
RUN mkdir -p /app/mlruns /app/logs /app/artifacts /app/data && \
    chown -R mluser:mluser /app

WORKDIR /app

# 애플리케이션 코드 복사 (소유권 설정)
COPY --chown=mluser:mluser configs/ ./configs/
COPY --chown=mluser:mluser recipes/ ./recipes/
COPY --chown=mluser:mluser sql/ ./sql/
COPY --chown=mluser:mluser src/ ./src/

# 사용자 전환
USER mluser

# 공통 환경변수
ENV PROJECT_NAME={{ project_name }} \
    PYTHONPATH=/app:$PYTHONPATH \
    # MLflow 설정
    MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI:-./mlruns}

###########################################
# Stage 4: API Serving (최적화)
###########################################
FROM runtime as api

# API 전용 의존성 (필요시)
USER root
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/*
USER mluser

# 포트 노출
EXPOSE 8000

# 헬스체크
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Gunicorn으로 프로덕션 서빙 (worker 수 최적화)
CMD ["sh", "-c", "gunicorn src.serving.router:app \
    --bind 0.0.0.0:8000 \
    --workers ${WORKERS:-4} \
    --worker-class uvicorn.workers.UvicornWorker \
    --timeout 120 \
    --graceful-timeout 30 \
    --max-requests 1000 \
    --max-requests-jitter 50 \
    --access-logfile - \
    --error-logfile - \
    --log-level ${LOG_LEVEL:-info}"]

###########################################
# Stage 5: Training (최적화)
###########################################
FROM runtime as training

# 학습 작업 실행
CMD ["sh", "-c", "mmp train \
    --recipe-path ${RECIPE_PATH:-recipes/production_model.yaml} \
    --config-path ${CONFIG_PATH:-configs/production.yaml} \
    --data-path ${TRAIN_DATA_PATH:-data/train.csv}"]

###########################################
# Stage 6: Batch Inference (최적화)
###########################################
FROM runtime as inference

# 배치 추론 실행
CMD ["sh", "-c", "mmp batch-inference \
    --run-id ${MODEL_RUN_ID} \
    --config-path ${CONFIG_PATH:-configs/production.yaml} \
    --data-path ${INFERENCE_DATA_PATH}"]

###########################################
# Default: API Serving
###########################################
FROM api as final