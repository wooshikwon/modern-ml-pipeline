# Recipe: {{ recipe_name }}
# Generated: {{ timestamp }}
# Task: {{ task }}
# Model: {{ model_class }}

name: {{ recipe_name }}

model:
  class_path: {{ model_class }}
  library: {{ model_library }}
  hyperparameters:
    tuning_enabled: {{ enable_tuning | lower }}
    {% if enable_tuning %}
    # Optuna 튜닝 설정
    fixed:
      {% for param, value in fixed_params.items() %}
      {{ param }}: {{ value }}
      {% endfor %}
    tunable:
      {% for param, spec in tunable_specs.items() %}
      {{ param }}:
        type: {{ spec.type }}
        range: {{ spec.range }}
      {% endfor %}
    {% else %}
    # 모든 파라미터 고정값
    values:
      {% for param, value in all_hyperparameters.items() %}
      {{ param }}: {{ value }}
      {% endfor %}
    {% endif %}

data:
  loader:
    # source_uri 패턴을 보고 어댑터가 자동 결정됨
    # .sql → SQL adapter, .csv/.parquet → Storage adapter
    source_uri: sql/train_data.sql  # TODO: 실제 데이터 경로로 수정
  
  data_interface:
    task_type: {{ task|lower }}
    target_column: target  # TODO: 실제 타겟 컬럼명으로 수정
    feature_columns: null  # null이면 target 제외 모든 컬럼 사용
    id_column: null        # 필요시 ID 컬럼 지정

# 전처리 파이프라인 (필요시 수정)
preprocessor:
  steps:
    - type: StandardScaler
      columns: [numerical_features]  # TODO: 실제 수치형 컬럼으로 수정
    - type: OneHotEncoder
      columns: [categorical_features]  # TODO: 실제 범주형 컬럼으로 수정

evaluation:
  metrics: {{ metrics }}
  validation:
    method: train_test_split
    test_size: {{ test_size }}
    random_state: 42

metadata:
  author: {{ author | default('CLI Recipe Builder') }}
  created_at: {{ timestamp }}
  description: "{{ task }} task using {{ model_library }}"
  {% if enable_tuning %}
  tuning_note: "Optuna 하이퍼파라미터 튜닝이 활성화됨. Config의 optuna 설정을 확인하세요."
  {% endif %}