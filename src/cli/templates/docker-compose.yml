version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: "{{ project_name }}-postgres"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mlflow
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/ddl:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ml_network

  # Redis for Feature Store Online Storage
  redis:
    image: redis:7-alpine
    container_name: "{{ project_name }}-redis"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ml_network

  # MLflow Tracking Server
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.8.0
    container_name: "{{ project_name }}-mlflow"
    command: >
      mlflow server
      --backend-store-uri postgresql://postgres:postgres@postgres:5432/mlflow
      --default-artifact-root /mlflow/artifacts
      --host 0.0.0.0
      --port 5000
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://postgres:postgres@postgres:5432/mlflow
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    ports:
      - "5002:5000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ml_network

  # Jupyter Lab for Development (Optional)
  jupyter:
    image: jupyter/scipy-notebook:latest
    container_name: "{{ project_name }}-jupyter"
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN: "{{ project_name }}"
    volumes:
      - ./data:/home/jovyan/data
      - ./recipes:/home/jovyan/recipes
      - ./configs:/home/jovyan/configs
    ports:
      - "8888:8888"
    networks:
      - ml_network
    profiles:
      - dev

  # MinIO for S3-compatible storage (Optional)
  minio:
    image: minio/minio:latest
    container_name: "{{ project_name }}-minio"
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ml_network
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mlflow_artifacts:
    driver: local
  minio_data:
    driver: local

networks:
  ml_network:
    driver: bridge
    name: "{{ project_name }}-network"