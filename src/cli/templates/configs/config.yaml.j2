# Configuration for {{ env_name }} environment
# Generated by MMP get-config

environment:
  env_name: {{ env_name }}
{%- if use_gcp %}
  gcp_project_id: "${GCP_PROJECT_ID:{{ gcp_project|default('') }}}"
{%- else %}
  gcp_project_id: ""
{%- endif %}

{%- if use_mlflow %}

mlflow:
  tracking_uri: "${MLFLOW_TRACKING_URI:./mlruns}"
  experiment_name: "${MLFLOW_EXPERIMENT_NAME:mmp-{{ env_name }}}"
  artifact_location: "${MLFLOW_ARTIFACT_ROOT:./mlruns}"
{%- endif %}

{%- if use_sql or use_bq or use_storage %}

data_adapters:
  {%- if use_sql %}
  default_loader: sql
  {%- elif use_bq %}
  default_loader: bigquery
  {%- endif %}
  {%- if use_storage %}
  default_storage: storage
  {%- endif %}
  
  adapters:
    {%- if use_sql %}
    sql:
      class_name: SqlAdapter
      config:
        connection_uri: "postgresql://${DB_USER:postgres}:${DB_PASSWORD:postgres}@${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:mmp_db}"
        query_timeout: ${DB_TIMEOUT:30}
    {%- endif %}
    
    {%- if use_bq %}
    bigquery:
      class_name: BigQueryAdapter  
      config:
        project_id: "${GCP_PROJECT_ID:{{ gcp_project|default('') }}}"
        dataset_id: "${BQ_DATASET_ID:mmp_dataset}"
        location: "${BQ_LOCATION:US}"
        query_timeout: ${BQ_TIMEOUT:30}
    {%- endif %}
    
    {%- if use_storage %}
    storage:
      class_name: StorageAdapter
      config:
        storage_options: {}
    {%- endif %}
{%- endif %}

{%- if use_feast %}

feature_store:
  provider: feast
  feast_config:
    project: mmp_{{ env_name }}
    provider: local
    registry: "${FEAST_REGISTRY_PATH:./feast_repo/registry.db}"
    online_store:
      {%- if use_redis %}
      type: redis
      connection_string: "${REDIS_HOST:localhost}:${REDIS_PORT:6379}"
      {%- else %}
      type: sqlite
      path: "${FEAST_ONLINE_STORE_PATH:./feast_repo/online_store.db}"
      {%- endif %}
    offline_store:
      {%- if use_bq %}
      type: bigquery
      project_id: "${GCP_PROJECT_ID:{{ gcp_project|default('') }}}"
      dataset_id: "${BQ_DATASET_ID:mmp_dataset}"
      {%- else %}
      type: file
      {%- endif %}
    entity_key_serialization_version: 2
{%- endif %}

{%- if enable_serving %}

serving:
  enabled: true
  host: "${API_HOST:0.0.0.0}"
  port: ${API_PORT:8000}
  workers: ${API_WORKERS:{{ serving_workers|default(1) }}}
  model_stage: "{{ model_stage|default('None') }}"
  {%- if enable_auth %}
  auth:
    enabled: true
    type: "${AUTH_TYPE:jwt}"
    secret_key: "${AUTH_SECRET_KEY:}"
  {%- endif %}
{%- else %}

serving:
  enabled: false
  model_stage: "None"
{%- endif %}

{%- if use_s3 or use_gcs or use_local_storage %}

artifact_stores:
  {%- if use_local_storage %}
  local:
    enabled: true
    base_uri: "${LOCAL_ARTIFACT_PATH:./artifacts}"
  {%- endif %}
  
  {%- if use_s3 %}
  s3:
    enabled: true
    bucket: "${S3_BUCKET:mmp-artifacts}"
    prefix: "${S3_PREFIX:{{ env_name }}}"
    region: "${AWS_REGION:us-east-1}"
    endpoint_url: "${S3_ENDPOINT_URL:}"  # For MinIO compatibility
  {%- endif %}
  
  {%- if use_gcs %}
  gcs:
    enabled: true
    bucket: "${GCS_BUCKET:mmp-artifacts}"
    prefix: "${GCS_PREFIX:{{ env_name }}}"
    project_id: "${GCP_PROJECT_ID:{{ gcp_project|default('') }}}"
  {%- endif %}
{%- endif %}

{%- if enable_hyperparameter_tuning %}

hyperparameter_tuning:
  enabled: true
  timeout: ${HYPERPARAM_TIMEOUT:{{ tuning_timeout|default(300) }}}
  engine: {{ tuning_engine|default('optuna') }}
  {%- if tuning_engine == 'optuna' %}
  optuna_config:
    study_name: "${OPTUNA_STUDY_NAME:mmp_{{ env_name }}_study}"
    storage: "${OPTUNA_STORAGE:sqlite:///optuna.db}"
    direction: "{{ tuning_direction|default('maximize') }}"
  {%- endif %}
  parallelization:
    n_jobs: ${HYPERPARAM_JOBS:{{ tuning_jobs|default(2) }}}
{%- else %}

hyperparameter_tuning:
  enabled: false
  timeout: 300
  engine: optuna
  parallelization:
    n_jobs: 2
{%- endif %}

{%- if enable_monitoring %}

monitoring:
  enabled: true
  prometheus_port: ${METRICS_PORT:{{ prometheus_port|default(9090) }}}
  {%- if enable_grafana %}
  grafana:
    enabled: true
    host: "${GRAFANA_HOST:localhost}"
    port: ${GRAFANA_PORT:3000}
  {%- endif %}
  metrics:
    collect_system: ${COLLECT_SYSTEM_METRICS:true}
    collect_model: ${COLLECT_MODEL_METRICS:true}
    collect_data: ${COLLECT_DATA_METRICS:true}
{%- else %}

monitoring:
  enabled: false
  prometheus_port: 9090
{%- endif %}