# =============================================================================
# config/enterprise.yaml - 엔터프라이즈 환경 설정
# =============================================================================
# 
# 🎯 Enterprise 환경: "확장성, 보안성, 관리성의 프로덕션급 MLOps"
# - 클라우드 네이티브 서비스 완전 활용
# - 엔터프라이즈 보안 및 거버넌스 준수
# - 대규모 팀 협업 및 멀티 프로젝트 지원
# - 완전한 관측 가능성 및 운영 자동화
#
# 📋 주요 Use Cases:
# 1. 대규모 ML 서빙 (100K+ requests/day)
# 2. 멀티팀 MLOps 플랫폼 운영
# 3. 엔터프라이즈 데이터 거버넌스
# 4. 규제 준수 및 감사 추적
# 5. 글로벌 멀티 리전 서비스
# =============================================================================

# 📊 MLflow 설정 - 엔터프라이즈 MLflow 서버
mlflow:
  tracking_uri: ${MLFLOW_TRACKING_URI}
  experiment_name: "Enterprise-Production-Models"
  
  # 🏢 엔터프라이즈 MLflow 옵션
  tags:
    environment: "production"
    team: "ml-platform"
    cost_center: "technology"
    compliance: "gdpr_sox"

# 🗃️ 데이터 어댑터 - 엔터프라이즈 데이터 플랫폼
data_adapters:
  default_loader: "sql"
  default_storage: "storage"
  default_feature_store: "feature_store"
  
  adapters:
    # SQL 어댑터 - BigQuery (기본) 또는 기타 엔터프라이즈 DW
    sql:
      class_name: SqlAdapter
      config:
        # Google Cloud BigQuery (권장)
        connection_uri: "bigquery://${GCP_PROJECT_ID}/${BIGQUERY_DATASET}"
        
        # 대안: Snowflake (멀티클라우드)
        # connection_uri: "snowflake://${SNOWFLAKE_USER}:${SNOWFLAKE_PASSWORD}@${SNOWFLAKE_ACCOUNT}/${SNOWFLAKE_DATABASE}/${SNOWFLAKE_SCHEMA}?warehouse=${SNOWFLAKE_WAREHOUSE}"
        
        # 대안: Azure Synapse
        # connection_uri: "mssql+pyodbc://${AZURE_SQL_USER}:${AZURE_SQL_PASSWORD}@${AZURE_SYNAPSE_ENDPOINT}:1433/${AZURE_SQL_DATABASE}?driver=ODBC+Driver+17+for+SQL+Server"
        
        # 대안: Enterprise PostgreSQL
        # connection_uri: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}"
    
    # Storage 어댑터 - 클라우드 오브젝트 스토리지
    storage:
      class_name: StorageAdapter
      config:
        # Google Cloud Storage (기본)
        storage_options:
          project: ${GCP_PROJECT_ID}
          token: ${GOOGLE_APPLICATION_CREDENTIALS}
        
        # 대안: AWS S3
        # storage_options:
        #   key: ${AWS_ACCESS_KEY_ID}
        #   secret: ${AWS_SECRET_ACCESS_KEY}
        #   client_kwargs:
        #     region_name: ${AWS_REGION}
        
        # 대안: Azure Blob Storage
        # storage_options:
        #   account_name: ${AZURE_STORAGE_ACCOUNT}
        #   account_key: ${AZURE_STORAGE_KEY}
    
    # Feature Store 어댑터
    feature_store:
      class_name: FeastAdapter
      config: {}

# 🍽️ Feature Store 설정 - 엔터프라이즈 Feature Store
feature_store:
  provider: "feast"
  feast_config:
    project: "enterprise_ml_platform"
    provider: "gcp"  # gcp/aws/azure
    registry: "gs://${GCS_BUCKET}/feast/registry.db"
    
    # Offline Store - BigQuery (대규모 배치 처리)
    offline_store:
      type: "bigquery"
      project_id: ${GCP_PROJECT_ID}
      dataset_id: "enterprise_feature_store"
      location: "US"
      
      # 대안: Snowflake
      # type: "snowflake"
      # account: ${SNOWFLAKE_ACCOUNT}
      # user: ${SNOWFLAKE_USER}
      # password: ${SNOWFLAKE_PASSWORD}
      # database: "ENTERPRISE_FEATURES"
      # warehouse: "FEATURE_WH"
    
    # Online Store - Redis (실시간 서빙)
    online_store:
      type: "redis"
      connection_string: ${REDIS_CONNECTION_STRING}
      ssl: true
      
      # 대안: DynamoDB (AWS)
      # type: "dynamodb"
      # region: ${AWS_REGION}
      # table_name: "enterprise_feast_online"
      
      # 대안: Cosmos DB (Azure)
      # type: "cosmosdb"
      # connection_string: ${COSMOSDB_CONNECTION_STRING}
      # database_name: "enterprise_feast"

# ⚡ 하이퍼파라미터 튜닝 - 엔터프라이즈급 최적화
hyperparameter_tuning:
  enabled: true
  timeout: 14400  # 4시간 (충분한 탐색 시간)
  engine: "optuna"
  
  # 고성능 분산 최적화
  pruning:
    enabled: true
    algorithm: "MedianPruner"
    n_startup_trials: 20
    n_warmup_steps: 50
  
  parallelization:
    n_jobs: 32  # 엔터프라이즈 컴퓨팅 자원 활용
    
  # 비용 최적화 설정
  cost_optimization:
    max_budget: 10000  # 최대 예산 ($)
    early_stopping: true
    resource_monitoring: true

# 🌐 환경 변수 - 엔터프라이즈 설정
environment:
  app_env: "prod"
  gcp_project_id: ${GCP_PROJECT_ID}
  
  # 🔒 보안 설정
  security:
    enable_authentication: true
    api_key_required: true
    rate_limiting: true
    encryption_at_rest: true
    encryption_in_transit: true
    
  # 📊 모니터링 설정
  monitoring:
    enable_metrics: true
    enable_tracing: true
    enable_profiling: true
    enable_alerting: true
    
  # 🏢 거버넌스 설정
  governance:
    enable_data_lineage: true
    enable_model_registry: true
    enable_audit_logging: true
    compliance_mode: "enterprise"
    
  # 📈 성능 설정
  performance:
    enable_caching: true
    enable_connection_pooling: true
    enable_async_processing: true

# 🔄 API 서빙 - 엔터프라이즈급 서빙
serving:
  enabled: true
  model_stage: "Production"
  
  # 🚀 고가용성 설정
  high_availability:
    min_replicas: 3
    max_replicas: 100
    auto_scaling: true
    health_checks: true
    
  # 🔒 보안 설정
  security:
    enable_https: true
    require_authentication: true
    enable_cors: false
    rate_limiting: 1000  # requests per minute
    
  # 📊 관측성
  observability:
    enable_metrics: true
    enable_logging: true
    enable_tracing: true
    log_level: "INFO"

# 📦 아티팩트 저장소 - 엔터프라이즈 데이터 관리
artifact_stores:
  # 피처 증강 데이터
  augmented_dataset:
    enabled: true
    base_uri: "gs://${GCS_BUCKET}/ml-artifacts/augmented"
    
    # 데이터 거버넌스
    governance:
      enable_versioning: true
      enable_lineage: true
      retention_policy: "7_years"
      encryption: true
    
  # 전처리 데이터 (감사용)
  preprocessed_dataset:
    enabled: true
    base_uri: "gs://${GCS_BUCKET}/ml-artifacts/preprocessed"
    retention_days: 2555  # 7년
    
  # 예측 결과 (규제 준수용)
  prediction_results:
    enabled: true
    base_uri: "gs://${GCS_BUCKET}/ml-predictions"
    
    # 🗄️ 데이터베이스 저장 (실시간 조회)
    postgres_storage:
      enabled: true
      table_name: "enterprise_predictions"
      connection_uri: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}"
      
      # 파티셔닝 및 인덱싱
      partitioning:
        enabled: true
        partition_by: "prediction_date"
        retention: "5_years"
      
      indexing:
        enabled: true
        indexes: ["model_id", "user_id", "prediction_timestamp"]

# 🔍 로깅 및 모니터링 - 엔터프라이즈 관측성
logging:
  level: "INFO"
  format: "json"
  
  # 📊 중앙화된 로그 수집
  aggregation:
    enabled: true
    service: "cloud_logging"  # cloud_logging/datadog/splunk
    project_id: ${GCP_PROJECT_ID}
    
  # 🚨 알림 설정
  alerting:
    enabled: true
    channels:
      slack:
        webhook_url: ${SLACK_WEBHOOK_URL}
        channel: "#ml-platform-alerts"
      pagerduty:
        api_key: ${PAGERDUTY_API_KEY}
        service_id: "ml-platform-service"
      email:
        smtp_host: ${EMAIL_SMTP_HOST}
        recipients: ["ml-ops@company.com"]

# 📈 성능 및 스케일링 설정
performance:
  # 🔄 연결 풀링
  connection_pooling:
    enabled: true
    pool_size: 20
    max_overflow: 50
    pool_timeout: 30
    
  # 💾 캐싱
  caching:
    enabled: true
    cache_type: "redis"  # redis/memcached/file
    ttl: 3600  # 1시간
    max_size: "10GB"
    
  # ⚡ 비동기 처리
  async_processing:
    enabled: true
    queue_size: 10000
    worker_count: 16

# 🔐 보안 및 규제 준수
security:
  # 🛡️ 데이터 암호화
  encryption:
    at_rest: true
    in_transit: true
    key_management: "cloud_kms"  # cloud_kms/vault/custom
    
  # 🔐 접근 제어
  access_control:
    authentication: "oidc"  # oidc/saml/ldap
    authorization: "rbac"   # rbac/abac
    mfa_required: true
    
  # 📋 감사 로깅
  audit_logging:
    enabled: true
    events: ["data_access", "model_training", "prediction_requests"]
    retention: "10_years"
    
  # 🛡️ 네트워크 보안
  network_security:
    enable_vpc: true
    enable_private_endpoints: true
    enable_firewall: true

# 💡 엔터프라이즈 운영 가이드:
#
# 🚀 초기 설정:
#   1. 클라우드 프로젝트 및 권한 설정
#   2. 환경변수 또는 비밀 관리 서비스 구성
#   3. 네트워크 및 보안 정책 적용
#   4. 모니터링 및 알림 설정
#
# 📊 운영 모니터링:
#   - 성능 메트릭: 응답시간, 처리량, 에러율
#   - 비용 모니터링: 클라우드 리소스 사용량
#   - 보안 모니터링: 접근 로그, 이상 탐지
#   - 데이터 품질: 데이터 드리프트, 모델 성능
#
# 🔄 배포 전략:
#   - Blue-Green 배포
#   - Canary 릴리스
#   - A/B 테스트
#   - 롤백 계획
#
# 🔒 보안 검토:
#   - 정기적인 보안 감사
#   - 접근 권한 검토
#   - 암호화 키 순환
#   - 취약점 스캔
#
# =============================================================================