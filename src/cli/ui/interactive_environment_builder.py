"""
Interactive Environment Builder for Modern ML Pipeline v2.0

ÎåÄÌôîÌòï ÌôòÍ≤Ω ÏÑ§Ï†ï Íµ¨Ï∂ïÍ∏∞ - Í∏∞Ï°¥ Î≥µÏû°Ìïú Jinja2 ÌÖúÌîåÎ¶ø Î∞©ÏãùÏùÑ ÏôÑÏ†Ñ ÎåÄÏ≤¥.
Rich UIÎ•º ÏÇ¨Ïö©Ìïú ÏßÅÍ¥ÄÏ†ÅÏù¥Í≥† ÏÇ¨Ïö©Ïûê ÏπúÌôîÏ†ÅÏù∏ ÌôòÍ≤Ω ÏÑ§Ï†ï Í≤ΩÌóò Ï†úÍ≥µ.

CLAUDE.md ÏõêÏπô Ï§ÄÏàò:
- ÌÉÄÏûÖ ÌûåÌä∏ ÌïÑÏàò
- Google Style Docstring
- Rich UIÎ°ú ÏÇ¨Ïö©Ïûê Í≤ΩÌóò ÏµúÏ†ÅÌôî
"""

from typing import Dict, Any
from datetime import datetime
import sys

from rich.console import Console
from rich.prompt import Prompt, Confirm
from rich.table import Table
from rich.panel import Panel

# ÏÉàÎ°úÏö¥ Î™®Îç∏Îì§Í≥º Ïú†Ìã∏Î¶¨Ìã∞ import
from src.cli.utils.config_management import (
    EnvironmentConfig,
    DataAdapterConfig,
    ServiceType
)
from src.cli.utils.system_integration import SimplifiedServiceCatalog


class InteractiveEnvironmentBuilder:
    """
    ÏôÑÏ†Ñ ÎåÄÌôîÌòï ÌôòÍ≤Ω ÏÑ§Ï†ï Íµ¨Ï∂ïÍ∏∞
    
    Recipe-Config Î∂ÑÎ¶¨ ÏïÑÌÇ§ÌÖçÏ≤òÏùò ÌïµÏã¨ UI Ïª¥Ìè¨ÎÑåÌä∏.
    ÏÇ¨Ïö©ÏûêÍ∞Ä 4Í∞ú ÌïµÏã¨ ÏÑúÎπÑÏä§Î•º ÎåÄÌôîÌòïÏúºÎ°ú ÏÑ†ÌÉùÌïòÍ≥†
    ÌôòÍ≤ΩÎ≥Ñ ÏôÑÏ†ÑÌïú ÏÑ§Ï†ïÏùÑ ÏûêÎèô Íµ¨ÏÑ±.
    
    ÏßÄÏõê ÏÑúÎπÑÏä§:
    - ML_TRACKING: MLflow (Local/Server/Disabled)
    - DATABASE: PostgreSQL, MySQL, BigQuery, Disabled
    - FEATURE_STORE: Redis, Disabled  
    - STORAGE: S3, GCS, Local
    
    Examples:
        builder = InteractiveEnvironmentBuilder()
        env_config = builder.create_environment("local")
        # ‚Üí EnvironmentConfig Í∞ùÏ≤¥ Î∞òÌôò (ÎåÄÌôîÌòï ÏÑ†ÌÉù ÏôÑÎ£å)
    """
    
    def __init__(self):
        """Interactive Environment Builder Ï¥àÍ∏∞Ìôî"""
        self.console = Console()
        self.catalog = SimplifiedServiceCatalog()
    
    def create_environment(self, env_name: str) -> EnvironmentConfig:
        """
        ÎåÄÌôîÌòï ÌôòÍ≤Ω ÏÉùÏÑ± ÌîÑÎ°úÏÑ∏Ïä§ Ïã§Ìñâ
        
        Args:
            env_name: ÏÉùÏÑ±Ìï† ÌôòÍ≤Ω Ïù¥Î¶Ñ
            
        Returns:
            EnvironmentConfig: ÏôÑÏ†ÑÌïú ÌôòÍ≤Ω ÏÑ§Ï†ï Í∞ùÏ≤¥
            
        Raises:
            KeyboardInterrupt: ÏÇ¨Ïö©ÏûêÍ∞Ä Ctrl+CÎ°ú Ï§ëÎã®Ìïú Í≤ΩÏö∞
            
        Process:
        1. Welcome Î©îÏãúÏßÄ Ï∂úÎ†•
        2. 4Í∞ú ÌïµÏã¨ ÏÑúÎπÑÏä§ ÏàúÏ∞® ÏÑ†ÌÉù
        3. Îç∞Ïù¥ÌÑ∞ Ïñ¥ÎåëÌÑ∞ ÏûêÎèô Íµ¨ÏÑ±
        4. ÏÑ†ÌÉù Í≤∞Í≥º ÌôïÏù∏
        5. EnvironmentConfig Í∞ùÏ≤¥ ÏÉùÏÑ± Î∞è Î∞òÌôò
        """
        
        try:
            # Welcome Î©îÏãúÏßÄ
            self._show_welcome_message(env_name)
            
            # 4Í∞ú ÌïµÏã¨ ÏÑúÎπÑÏä§ ÎåÄÌôîÌòï ÏÑ†ÌÉù
            self.console.print("\n[bold cyan]üîß ÏÑúÎπÑÏä§ ÏÑ§Ï†ï[/bold cyan]")
            self.console.print("ÌïÑÏöîÌïú ÏÑúÎπÑÏä§Îì§ÏùÑ ÏàúÏÑúÎåÄÎ°ú ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.\n")
            
            ml_tracking_config = self._configure_ml_tracking()
            database_config = self._configure_database()  
            feature_store_config = self._configure_feature_store()
            storage_config = self._configure_storage()
            
            # Îç∞Ïù¥ÌÑ∞ Ïñ¥ÎåëÌÑ∞ ÏûêÎèô Íµ¨ÏÑ±
            data_adapters = self._build_data_adapters(database_config, storage_config)
            
            # ÏÑ†ÌÉù Í≤∞Í≥º ÏöîÏïΩ Î∞è ÌôïÏù∏
            env_config = EnvironmentConfig(
                name=env_name,
                ml_tracking=ml_tracking_config,
                data_adapters=data_adapters,
                feature_store=feature_store_config,
                storage=storage_config,
                created_at=datetime.now().isoformat(),
                description=f"Interactive configuration for {env_name} environment"
            )
            
            self._show_configuration_summary(env_config)
            
            if not self._confirm_configuration():
                self.console.print("[yellow]ÏÑ§Ï†ïÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.[/yellow]")
                sys.exit(0)
            
            return env_config
            
        except KeyboardInterrupt:
            self.console.print("\n[red]ÏÇ¨Ïö©ÏûêÏóê ÏùòÌï¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.[/red]")
            sys.exit(0)
    
    def _show_welcome_message(self, env_name: str) -> None:
        """Welcome Î©îÏãúÏßÄ Î∞è ÏïàÎÇ¥ Ï∂úÎ†•"""
        welcome_panel = Panel(
            f"""[bold green]üöÄ '{env_name}' ÌôòÍ≤Ω ÏÑ§Ï†ïÏùÑ ÏãúÏûëÌï©ÎãàÎã§![/bold green]

[bold yellow]Modern ML Pipeline v2.0 ÌäπÏßï:[/bold yellow]
‚Ä¢ Recipe-Config ÏôÑÏ†Ñ Î∂ÑÎ¶¨ ÏïÑÌÇ§ÌÖçÏ≤ò
‚Ä¢ ÌôòÍ≤ΩÏóê ÎèÖÎ¶ΩÏ†ÅÏù∏ Recipe Ïû¨ÏÇ¨Ïö©
‚Ä¢ ÎåÄÌôîÌòï UIÎ°ú ÏßÅÍ¥ÄÏ†Å ÏÑ§Ï†ï

[bold cyan]ÏÑ§Ï†ïÌï† ÏÑúÎπÑÏä§ (4Í∞ú):[/bold cyan]
1Ô∏è‚É£ ML Tracking (Ïã§Ìóò Ï∂îÏ†Å)
2Ô∏è‚É£ Database (SQL Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§) 
3Ô∏è‚É£ Feature Store (Point-in-Time Ï°∞Ïù∏)
4Ô∏è‚É£ Storage (ÏïÑÌã∞Ìå©Ìä∏ Ï†ÄÏû•)""",
            title="Environment Configuration",
            border_style="green"
        )
        
        self.console.print(welcome_panel)
    
    def _configure_ml_tracking(self) -> Dict[str, Any]:
        """ML Tracking ÏÑúÎπÑÏä§ ÏÑ†ÌÉù"""
        return self._select_service_interactive(
            service_type=ServiceType.ML_TRACKING,
            title="1Ô∏è‚É£ ML Tracking (Ïã§Ìóò Ï∂îÏ†Å)",
            description="MLflowÎ•º ÏÇ¨Ïö©Ìïú Ïã§Ìóò Ï∂îÏ†Å ÏÑ§Ï†ï"
        )
    
    def _configure_database(self) -> Dict[str, Any]:
        """Database ÏÑúÎπÑÏä§ ÏÑ†ÌÉù"""
        return self._select_service_interactive(
            service_type=ServiceType.DATABASE,
            title="2Ô∏è‚É£ Database (SQL Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§)",
            description="SQL Í∏∞Î∞ò Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§ ÏÑ§Ï†ï"
        )
    
    def _configure_feature_store(self) -> Dict[str, Any]:
        """Feature Store ÏÑúÎπÑÏä§ ÏÑ†ÌÉù"""
        return self._select_service_interactive(
            service_type=ServiceType.FEATURE_STORE,
            title="3Ô∏è‚É£ Feature Store (Point-in-Time Ï°∞Ïù∏)",
            description="ÌîºÏ≤ò Ïä§ÌÜ†Ïñ¥ Î∞è Point-in-Time Ï°∞Ïù∏ ÏÑ§Ï†ï"
        )
    
    def _configure_storage(self) -> Dict[str, Any]:
        """Storage ÏÑúÎπÑÏä§ ÏÑ†ÌÉù"""
        return self._select_service_interactive(
            service_type=ServiceType.STORAGE,
            title="4Ô∏è‚É£ Storage (ÏïÑÌã∞Ìå©Ìä∏ Ï†ÄÏû•)",
            description="Î™®Îç∏ Î∞è ÏïÑÌã∞Ìå©Ìä∏ Ï†ÄÏû•ÏÜå ÏÑ§Ï†ï"
        )
    
    def _select_service_interactive(
        self, 
        service_type: ServiceType, 
        title: str, 
        description: str
    ) -> Dict[str, Any]:
        """
        ÌäπÏ†ï ÏÑúÎπÑÏä§ ÌÉÄÏûÖÏóê ÎåÄÌïú ÎåÄÌôîÌòï ÏÑ†ÌÉù
        
        Args:
            service_type: ÏÑ†ÌÉùÌï† ÏÑúÎπÑÏä§ ÌÉÄÏûÖ
            title: ÏÑπÏÖò Ï†úÎ™©
            description: ÏÑúÎπÑÏä§ ÏÑ§Î™Ö
            
        Returns:
            Dict[str, Any]: ÏÑ†ÌÉùÎêú ÏÑúÎπÑÏä§ ÏÑ§Ï†ï
        """
        
        self.console.print(f"\n[bold blue]{title}[/bold blue]")
        self.console.print(f"[dim]{description}[/dim]")
        
        # ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏÑúÎπÑÏä§ ÏòµÏÖò Í∞ÄÏ†∏Ïò§Í∏∞
        options = self.catalog.get_service_options(service_type)
        
        if not options:
            self.console.print("[red]ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏòµÏÖòÏù¥ ÏóÜÏäµÎãàÎã§.[/red]")
            return {"provider": "none", "config": {}}
        
        # ÏòµÏÖò ÌÖåÏù¥Î∏î ÏÉùÏÑ±
        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("Î≤àÌò∏", style="dim", width=6)
        table.add_column("ÏÑúÎπÑÏä§", style="cyan", min_width=15)
        table.add_column("ÏÑ§Î™Ö", style="yellow")
        
        for i, option in enumerate(options, 1):
            table.add_row(
                str(i), 
                option["name"], 
                option.get("description", "")
            )
        
        self.console.print(table)
        
        # ÏÇ¨Ïö©Ïûê ÏÑ†ÌÉù Î∞õÍ∏∞
        choices = [str(i) for i in range(1, len(options) + 1)]
        choice_idx = int(Prompt.ask("ÏÑ†ÌÉùÌïòÏÑ∏Ïöî", choices=choices)) - 1
        selected_option = options[choice_idx]
        
        self.console.print(f"[green]‚úì {selected_option['name']} ÏÑ†ÌÉùÎê®[/green]")
        
        # ÏÑ†ÌÉùÎêú ÏÑúÎπÑÏä§Ïóê Îî∞Î•∏ Í∏∞Î≥∏ ÏÑ§Ï†ï Î∞òÌôò
        return self._build_service_config(selected_option)
    
    def _build_service_config(self, selected_option: Dict[str, Any]) -> Dict[str, Any]:
        """
        ÏÑ†ÌÉùÎêú ÏÑúÎπÑÏä§ ÏòµÏÖòÏùÑ Î∞îÌÉïÏúºÎ°ú Í∏∞Î≥∏ ÏÑ§Ï†ï Íµ¨ÏÑ±
        
        Args:
            selected_option: ÏÑ†ÌÉùÎêú ÏÑúÎπÑÏä§ ÏòµÏÖò
            
        Returns:
            Dict[str, Any]: ÏÑúÎπÑÏä§Î≥Ñ Í∏∞Î≥∏ ÏÑ§Ï†ï
        """
        
        provider = selected_option["provider"]
        
        # ProviderÎ≥Ñ Í∏∞Î≥∏ ÏÑ§Ï†ï Íµ¨ÏÑ±
        if provider == "mlflow_local":
            return {
                "provider": provider,
                "tracking_uri": "./mlruns",
                "experiment_name": "${EXPERIMENT_NAME:default-experiment}"
            }
        elif provider == "mlflow_server":
            return {
                "provider": provider,
                "tracking_uri": "${MLFLOW_TRACKING_URI:http://localhost:5000}",
                "experiment_name": "${EXPERIMENT_NAME:default-experiment}"
            }
        elif provider in ["postgresql", "mysql"]:
            return {
                "provider": provider,
                "connection": {
                    "host": "${DATABASE_HOST:localhost}",
                    "port": 5432 if provider == "postgresql" else 3306,
                    "database": "${DATABASE_NAME:mlpipeline}",
                    "username": "${DATABASE_USER:user}",
                    "password": "${DATABASE_PASSWORD:password}"
                }
            }
        elif provider == "bigquery":
            return {
                "provider": provider,
                "connection": {
                    "project_id": "${BIGQUERY_PROJECT_ID:your-project}",
                    "dataset": "${BIGQUERY_DATASET:ml_pipeline}",
                    "credentials": "${GOOGLE_APPLICATION_CREDENTIALS:./credentials/bigquery.json}"
                }
            }
        elif provider == "redis":
            return {
                "provider": provider,
                "connection_url": "${REDIS_URL:redis://localhost:6379/0}",
                "namespace": "${FEATURE_STORE_NAMESPACE:ml_features}"
            }
        elif provider == "s3":
            return {
                "provider": provider,
                "bucket": "${S3_BUCKET:ml-pipeline-artifacts}",
                "region": "${AWS_REGION:us-west-2}",
                "access_key": "${AWS_ACCESS_KEY_ID}",
                "secret_key": "${AWS_SECRET_ACCESS_KEY}"
            }
        elif provider == "gcs":
            return {
                "provider": provider,
                "bucket": "${GCS_BUCKET:ml-pipeline-artifacts}",
                "credentials": "${GOOGLE_APPLICATION_CREDENTIALS:./credentials/gcs.json}"
            }
        elif provider == "local":
            return {
                "provider": provider,
                "base_path": "${STORAGE_BASE_PATH:./artifacts}"
            }
        else:  # "none" or unknown
            return {
                "provider": "none",
                "config": {}
            }
    
    def _build_data_adapters(
        self, 
        database_config: Dict[str, Any], 
        storage_config: Dict[str, Any]
    ) -> Dict[str, DataAdapterConfig]:
        """
        DatabaseÏôÄ Storage ÏÑ§Ï†ïÏùÑ Í∏∞Î∞òÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ Ïñ¥ÎåëÌÑ∞ ÏûêÎèô Íµ¨ÏÑ±
        
        Args:
            database_config: ÏÑ†ÌÉùÎêú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ï
            storage_config: ÏÑ†ÌÉùÎêú Ïä§ÌÜ†Î¶¨ÏßÄ ÏÑ§Ï†ï
            
        Returns:
            Dict[str, DataAdapterConfig]: Íµ¨ÏÑ±Îêú Îç∞Ïù¥ÌÑ∞ Ïñ¥ÎåëÌÑ∞Îì§
        """
        
        adapters = {}
        
        # SQL Ïñ¥ÎåëÌÑ∞ (Database ÏÑ§Ï†ï Í∏∞Î∞ò)
        if database_config["provider"] != "none":
            adapters["sql"] = DataAdapterConfig(
                type=database_config["provider"],
                connection_params=database_config.get("connection", {})
            )
        
        # Storage Ïñ¥ÎåëÌÑ∞ (Storage ÏÑ§Ï†ï Í∏∞Î∞ò, Ìï≠ÏÉÅ ÏÉùÏÑ±)  
        adapters["storage"] = DataAdapterConfig(
            type=storage_config["provider"],
            connection_params=storage_config
        )
        
        return adapters
    
    def _show_configuration_summary(self, env_config: EnvironmentConfig) -> None:
        """Íµ¨ÏÑ±Îêú ÌôòÍ≤Ω ÏÑ§Ï†ï ÏöîÏïΩ ÌëúÏãú"""
        
        self.console.print(f"\n[bold cyan]üìã '{env_config.name}' ÌôòÍ≤Ω ÏÑ§Ï†ï ÏöîÏïΩ[/bold cyan]")
        
        # ÏÑ§Ï†ï ÏöîÏïΩ ÌÖåÏù¥Î∏î
        summary_table = Table(show_header=True, header_style="bold magenta")
        summary_table.add_column("ÏÑúÎπÑÏä§", style="cyan", min_width=15)
        summary_table.add_column("ÏÑ†ÌÉùÎêú ÏòµÏÖò", style="green")
        summary_table.add_column("ÏÉÅÌÉú", style="yellow")
        
        # ML Tracking
        ml_provider = env_config.ml_tracking.get("provider", "unknown")
        ml_status = "‚úÖ ÌôúÏÑ±Ìôî" if ml_provider != "none" else "‚è∏Ô∏è ÎπÑÌôúÏÑ±Ìôî"
        summary_table.add_row("ML Tracking", ml_provider, ml_status)
        
        # Database
        sql_adapter = env_config.data_adapters.get("sql")
        if sql_adapter:
            db_status = f"‚úÖ {sql_adapter.type}"
        else:
            db_status = "‚è∏Ô∏è ÎπÑÌôúÏÑ±Ìôî"
        summary_table.add_row("Database", sql_adapter.type if sql_adapter else "none", db_status)
        
        # Feature Store
        fs_provider = env_config.feature_store.get("provider", "none")
        fs_status = "‚úÖ ÌôúÏÑ±Ìôî" if fs_provider != "none" else "‚è∏Ô∏è ÎπÑÌôúÏÑ±Ìôî"
        summary_table.add_row("Feature Store", fs_provider, fs_status)
        
        # Storage
        storage_adapter = env_config.data_adapters.get("storage")
        storage_status = f"‚úÖ {storage_adapter.type}" if storage_adapter else "‚ùå Ïò§Î•ò"
        summary_table.add_row("Storage", storage_adapter.type if storage_adapter else "unknown", storage_status)
        
        self.console.print(summary_table)
    
    def _confirm_configuration(self) -> bool:
        """ÏÑ§Ï†ï ÌôïÏù∏"""
        return Confirm.ask(
            "\n[bold yellow]Ïù¥ ÏÑ§Ï†ïÏúºÎ°ú ÌôòÍ≤ΩÏùÑ ÏÉùÏÑ±ÌïòÏãúÍ≤†ÏäµÎãàÍπå?[/bold yellow]",
            default=True
        )