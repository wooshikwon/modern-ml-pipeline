# config/dev.yaml: 'dev' 환경 전용 설정
# -----------------------------------------------------------------------------
# 이 파일은 APP_ENV=dev 환경에서 base.yaml의 설정을 덮어쓰는 값만 정의합니다.
# 주로 개발팀이 공유하는 통합 개발 서버 환경을 위한 설정입니다.
# 🆕 외부 로컬 DB 환경 (ml-pipeline-local-db) 연결 설정 추가
# -----------------------------------------------------------------------------

# 🆕 데이터베이스 연결 (외부 로컬 PostgreSQL)
database:
  type: "postgresql"
  host: "localhost"
  port: 5432
  name: "mlpipeline"
  user: "mluser"
  password: "mlpassword"
  schema: "public"
  
  # 개발용 최적화
  pool_size: 5
  max_overflow: 10
  echo_sql: true  # 개발 중 SQL 로깅

# 🆕 데이터 어댑터 설정 (Blueprint v17.0: Config-driven Dynamic Factory)
data_adapters:
  # DEV 환경 어댑터 매핑 (PostgreSQL 중심)
  default_loader: "postgresql"
  default_storage: "postgresql"
  default_feature_store: "postgresql"
  
  # DEV 환경 특화 어댑터 설정
  adapters:
    postgresql:
      class_name: "PostgreSQLAdapter"
      config:
        host: "localhost"
        port: 5432
        database: "mlpipeline"
        user: "mluser"
        password: "mlpassword"
        schema: "public"
        pool_size: 10
        max_overflow: 20
        echo_sql: true  # 개발 환경에서 SQL 로깅 활성화
    
    redis:
      class_name: "RedisAdapter"
      config:
        host: "localhost"
        port: 6379
        db: 0
        password: ""
        decode_responses: true
        socket_timeout: 5
        connection_pool_max_connections: 20
    
    filesystem:
      class_name: "FileSystemAdapter"
      config:
        base_path: "./data"
        supported_formats: ["parquet", "csv", "json"]
        auto_create_dirs: true

#  Feature Store 설정 (Blueprint v17.0: config 통합)
feature_store:
  provider: "feast"
  
  # 🎯 Blueprint 원칙 1 준수: 모든 설정을 config에 통합
  # feast 별도 파일 대신 여기서 완전히 정의
  feast_config:
    project: "ml_pipeline_dev"
    provider: "local"
    
    # Registry (피처 메타데이터 저장소)
    registry:
      registry_type: "sql"
      path: "postgresql://mluser:mlpassword@localhost:5432/mlpipeline"
    
    # Offline Store (대량 피처 조회 - 학습용)
    offline_store:
      type: "postgres"
      host: "localhost"
      port: 5432
      database: "mlpipeline"
      db_schema: "feature_mart"
      user: "mluser"
      password: "mlpassword"
      sslmode: "disable"
    
    # Online Store (실시간 피처 조회 - 서빙용)
    online_store:
      type: "redis"
      connection_string: "redis://localhost:6379"
      database: 0
    
    # Entity 정의
    entities:
      - name: "user"
        value_type: "STRING"
        description: "사용자 식별자"
      - name: "product"
        value_type: "STRING"
        description: "상품 식별자"
      - name: "session"
        value_type: "STRING"
        description: "세션 식별자"
    
    # 설정 플래그
    entity_key_serialization_version: 2
    flags:
      alpha_features: true
      beta_features: true
    
    # 배치 엔진
    batch_engine:
      type: "local"
    
    # Feature Server (개발 환경에서는 비활성화)
    feature_server:
      enabled: false

# 🆕 하이퍼파라미터 튜닝 (개발 환경 제약)
hyperparameter_tuning:
  enabled: true
  timeout: 600  # 10분 제한 (개발 환경)
  max_parallel_jobs: 2  # 로컬 리소스 보호
  
  # Optuna 백엔드 (외부 PostgreSQL)
  study_storage: "postgresql://mluser:mlpassword@localhost:5432/mlpipeline"
  
  pruning:
    enabled: true
    algorithm: "MedianPruner"
    n_startup_trials: 3  # 빠른 pruning

environment:
  # 개발용 GCP 프로젝트 ID
  gcp_project_id: "your-dev-gcp-project-id"

mlflow:
  # 🆕 로컬 개발 환경에서는 파일 기반 MLflow 사용
  tracking_uri: "file://./mlruns"
  experiment_name: "Campaign-Uplift-Modeling-Dev"
  artifact_location: "./data/artifacts"

serving:
  # 🆕 외부 Redis를 실시간 피처 스토어로 사용
  realtime_feature_store:
    store_type: "redis"
    connection:
      host: "localhost"
      port: 6379
      db: 0

artifact_stores:
  augmented_dataset:
    # 🆕 개발 환경에서는 외부 PostgreSQL 사용
    base_uri: "postgresql://mluser:mlpassword@localhost:5432/mlpipeline"
  preprocessed_dataset:
    # 🆕 개발 환경에서는 로컬 파일 시스템 사용
    enabled: true
    base_uri: "file://./data/processed"
  prediction_results:
    # 🆕 개발 환경에서는 외부 PostgreSQL 사용
    base_uri: "postgresql://mluser:mlpassword@localhost:5432/mlpipeline"

# 🆕 로깅 설정 (개발 환경 상세 로깅)
logging:
  level: "DEBUG"
  format: "detailed"
  handlers:
    - type: "console"
      level: "INFO"
    - type: "file"
      level: "DEBUG"
      filename: "./logs/app.log"
      max_size: "10MB"
      backup_count: 5

# 🆕 개발 환경 최적화
development:
  auto_reload: true
  debug_mode: true
  
  # 빠른 테스트를 위한 설정
  sample_data_size: 10000  # 작은 데이터셋 사용
  cache_preprocessing: true
  
  # 개발 중 안전장치
  max_training_time: 1800  # 30분 제한
