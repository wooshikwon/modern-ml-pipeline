# =============================================================================
# config/base.yaml - 기본 설정 및 모든 환경의 공통 기반
# =============================================================================
# 
# 🎯 BASE 설정 철학: "안전하고 보수적인 기본값"
# - 모든 환경의 공통 기반이자 로컬 개발의 기본값
# - 가장 안전하고 보수적인 값으로 설정
# - 외부 의존성 최소화 및 즉시 실행 가능성 보장
# - 각 환경별 설정이 이 값들을 덮어씀
#
# 📋 주요 Use Cases:
# 1. 새로운 개발자의 첫 실행 기본값
# 2. 모든 환경 설정의 fallback 기본값  
# 3. 로컬 개발 환경의 기본 동작 정의
# 4. CI/CD에서 환경변수 미설정시 안전한 기본값
# 5. 오프라인 개발 환경 지원
# =============================================================================

# 1. 실행 환경
environment:
  # 기본 실행 환경은 'local'입니다.
  # Docker 빌드 시 또는 서버 환경에서 APP_ENV 환경 변수를 주입하여 변경할 수 있습니다.
  app_env: ${APP_ENV:local}
  # 로컬 개발 시에는 이 값을 사용하거나, .env 파일에서 덮어쓸 수 있습니다.
  gcp_project_id: "local-project"
  gcp_credential_path: ${GCP_CREDENTIAL_PATH:./credentials/local_gcp_credentials.json}

# 2. 모델 아티팩트 스토어 (MLflow Model Registry)
mlflow:
  # LOCAL 환경에서는 파일 시스템 기반 MLflow 사용 (Graceful Degradation)
  tracking_uri: ${MLFLOW_TRACKING_URI:./mlruns}  # 기본값: 로컬 파일 모드, 서버 사용시 환경변수로 오버라이드
  # 모든 실험의 통합 목적을 명확히 정의
  experiment_name: "Default-Experiment"

# 3. API 서버 운영 환경
serving:
  # API 서버 실행 시, 기본적으로 'Staging' 스테이지의 모델을 사용하도록 설정합니다.
  # 프로덕션에서는 config.prod.yaml에서 이 값을 "Production"으로 덮어씁니다.
  model_stage: ${MODEL_STAGE:Staging}
  # 실시간 피처 스토어 설정 (로컬 개발용)
  realtime_feature_store:
    store_type: "redis"
    connection:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      db: 0

# 4. 데이터셋 아티팩트 스토어 (중간/최종 산출물 저장 위치)
artifact_stores:
  # 피처 증강 데이터셋 저장소
  augmented_dataset:
    enabled: true
    # 로컬 환경에서는 기본적으로 프로젝트 내 디렉토리에 파일로 저장됩니다.
    base_uri: "file://local/artifacts/augmented"
  
  # 전처리 완료 데이터셋 저장소
  preprocessed_dataset:
    enabled: false # 디버깅 시에만 true로 변경하여 사용
    base_uri: "file://local/artifacts/preprocessed"
  
  # 최종 예측 결과 저장소
  prediction_results:
    enabled: true
    base_uri: "file://local/artifacts/predictions"

# 🆕 5. 하이퍼파라미터 튜닝 (새로 추가 - 기본값: 비활성화)
hyperparameter_tuning:
  enabled: false  # 기본값: 기존 동작 유지 (고정 hyperparameters)
  engine: "optuna"
  timeout: 1800  # 30분 (인프라 제약)
  pruning:
    enabled: true
    algorithm: "MedianPruner"
    n_startup_trials: 5
    n_warmup_steps: 10
  parallelization:
    n_jobs: 1  # 기본값: 단일 코어

# 🍽️ 6. Feature Store (Blueprint v17.0: config 통합)
feature_store:
  provider: "dynamic"  # runtime에서 결정
  
  # 🎯 Blueprint 원칙 1 준수: 로컬 환경 기본 설정
  # LOCAL 환경의 기본값 (data/ 디렉토리 기반)
  feast_config:
    project: "modern_ml_pipeline"
    provider: "local"
    
    # Registry (로컬 파일 기반)
    registry: "data/feature_repo/registry.db"
    
    # Offline Store (로컬 파일 시스템)
    offline_store:
      type: "file"
      path: "data/feature_store/offline"
    
    # Online Store (로컬 SQLite)
    online_store:
      type: "redis"
      connection_string: ${FEATURE_STORE_REDIS_HOST:localhost}:6380 # 포트 변경
    
    # 기본 엔티티 정의
    entities:
      - name: "user"
        value_type: "STRING"
        description: "사용자 식별자"
      - name: "product"
        value_type: "STRING"
        description: "상품 식별자"
      - name: "session"
        value_type: "STRING"
        description: "세션 식별자"
    
    # 설정 플래그
    entity_key_serialization_version: 2
    flags:
      alpha_features: true
      beta_features: false  # 로컬에서는 안정성 우선
    
    # 배치 엔진
    batch_engine:
      type: "local"
    
    # Feature Server (로컬에서는 비활성화)
    feature_server:
      enabled: false
  
  # 연결 정보 (하위 호환성)
  connection_timeout: 5000
  retry_attempts: 3
  connection_info:
    # 환경별로 config/*.yaml에서 주입
    redis_host: ${FEATURE_STORE_REDIS_HOST:localhost:6379}
    offline_store_uri: ${FEATURE_STORE_OFFLINE_URI:file://data/feature_store/offline}
