# Random Forest Regressor - Blueprint v17.0 Automated Excellence
# 🌳 앙상블 기반의 강력하고 안정적인 비선형 회귀 모델

# 1. 모델 기본 정보 (직접 동적 import)
class_path: "sklearn.ensemble.RandomForestRegressor"

# 2. 데이터 로더 정의
loader:
  name: "regression_dataset"
  source_uri: "recipes/sql/loader/regression_features.sql"

# 3. 피처 증강기 정의 (🆕 Blueprint v17.0 - Feature Store 방식)
augmenter:
  type: "feature_store"
  features:
    # 기본 수치형 피처
    - feature_namespace: "numerical_features"
      features: ["feature_1", "feature_2", "feature_3", "feature_4"]
    # 사용자 행동 피처
    - feature_namespace: "user_engagement"
      features: ["page_views", "time_spent", "bounce_rate"]
    # 범주형 피처 (Random Forest가 잘 처리함)
    - feature_namespace: "categorical_features"
      features: ["category_1", "category_2", "category_3"]

# 4. 전처리기 정의
preprocessor:
  name: "simple_scaler"
  params:
    criterion_col: null
    exclude_cols: ["user_id", "event_timestamp"]

# 5. 모델 인터페이스
data_interface:
  task_type: "regression"
  
  features:
    feature_1: "numeric"
    feature_2: "numeric"
    feature_3: "numeric"
    feature_4: "numeric"
    page_views: "numeric"
    time_spent: "numeric"
    bounce_rate: "numeric"
    category_1: "category"
    category_2: "category"
    category_3: "category"
  
  target_col: "target_value"

# 🆕 6. 하이퍼파라미터 (Dictionary 형식 + 자동 튜닝)
hyperparameters:
  # 🔥 자동 최적화 범위 (Random Forest 특화)
  n_estimators: {type: "int", low: 50, high: 500}
  max_depth: {type: "int", low: 3, high: 20}
  min_samples_split: {type: "int", low: 2, high: 20}
  min_samples_leaf: {type: "int", low: 1, high: 10}
  max_features: {type: "categorical", choices: ["sqrt", "log2", "auto"]}
  bootstrap: {type: "categorical", choices: [true, false]}
  
  # 🔧 고정값
  random_state: 42
  n_jobs: -1

# 🆕 7. 하이퍼파라미터 튜닝 설정
hyperparameter_tuning:
  enabled: true
  n_trials: 80
  metric: "rmse"
  direction: "minimize" 