# T-Learner - 인과추론 업리프트 모델
# 🎯 Treatment와 Control 그룹 분리 학습을 통한 정확한 효과 측정

name: "t_learner"

model:
  # 직접 동적 import를 통한 T-Learner 모델
  class_path: "causalml.inference.meta.TLearner"
  
  # 하이퍼파라미터 정의 (Optuna 자동 최적화 지원)
  hyperparameters:
    # 🔥 자동 최적화 범위 - T-Learner는 base learner에 의존
    # Base learner 설정 (XGBoost 사용)
    base_learner: "xgboost"
    
    # XGBoost 하이퍼파라미터 (T-Learner 내부)
    learning_rate: {type: "float", low: 0.01, high: 0.3, log: true}
    n_estimators: {type: "int", low: 50, high: 500}
    max_depth: {type: "int", low: 3, high: 10}
    subsample: {type: "float", low: 0.6, high: 1.0}
    
    # 🔧 고정값 - T-Learner 안정성을 위한 설정
    random_state: 42

  # 하이퍼파라미터 튜닝 설정
  hyperparameter_tuning:
    enabled: true
    n_trials: 100
    metric: "uplift_auc"  # 업리프트 모델 전용 메트릭
    direction: "maximize"

  # 데이터 로더 정의 (Spine 생성)
  loader:
    name: "causal_loader"
    source_uri: "recipes/sql/loaders/user_features.sql"

  # 피처 증강 정의 (Feature Store 기반)
  augmenter:
    type: "feature_store"
    features:
      # 사용자 기본 정보 피처
      - feature_namespace: "user_demographics"
        features: ["age", "country_code"]
      
      # 사용자 구매 이력 피처  
      - feature_namespace: "user_purchase_summary"
        features: ["ltv", "total_purchase_count", "last_purchase_date"]
      
      # 상품 상세 정보 피처
      - feature_namespace: "product_details"
        features: ["price", "category", "brand"]
      
      # 세션 행동 피처
      - feature_namespace: "session_summary"
        features: ["time_on_page_seconds", "click_count"]

  # 전처리 설정
  preprocessor:
    name: "simple_scaler"
    params:
      criterion_col: null
      # 엔티티 키와 타임스탬프 제외
      exclude_cols: ["user_id", "product_id", "session_id", "event_timestamp"]

  # 데이터 인터페이스 정의 (인과추론 특화)
  data_interface:
    task_type: "causal"
    target_col: "outcome"
    treatment_col: "treatment"
    treatment_value: "1"  # treatment 그룹 표시

  # 평가자 설정
  evaluator:
    name: "causal_evaluator"

# 평가 설정 (인과추론 특화 메트릭)
evaluation:
  metrics:
    - "uplift_auc"
    - "uplift_at_k"
    - "qini_coefficient"
    - "treatment_effect"
  
  validation:
    method: "train_test_split"
    test_size: 0.2
    stratify: true  # treatment 비율 유지
    random_state: 42

# 💡 사용 예시:
# APP_ENV=dev uv run python main.py train --recipe-file models/causal/t_learner 