# Causal Random Forest: Robust Tree-Based Causal Inference
# 🌲 Random Forest의 안정성과 Causal inference의 정확성을 결합

name: "causal_random_forest"

model:
  # EconML Causal Forest 직접 동적 import
  class_path: "econml.dml.CausalForestDML"
  
  # Phase 1: Point-in-Time 정합성 스키마
  loader:
    name: "campaign_uplift_loader"
    source_uri: "recipes/sql/loaders/uplift_modeling_features.sql"
    adapter: sql
    entity_schema:
      entity_columns: ["customer_id"]
      timestamp_column: "exposure_date"
  
  # 기존: ML 작업별 세부 설정 (Causal 전용)
  data_interface:
    task_type: "causal"
    target_column: "purchase_probability"    # 구매 확률 (연속형)
    treatment_column: "discount_applied"     # 할인 적용 여부 (0/1)
    treatment_value: 1                       # Treatment 그룹 (할인 받은 경우)
    
  # Dictionary 형태 하이퍼파라미터 (Causal Random Forest 특화)
  hyperparameters:
    # Forest 구조 파라미터
    n_estimators: {type: "int", low: 100, high: 1000}
    max_depth: {type: "int", low: 5, high: 25}
    min_samples_split: {type: "int", low: 5, high: 50}
    min_samples_leaf: {type: "int", low: 2, high: 20}
    
    # Causal Forest 특화 파라미터
    subsample_fr: {type: "float", low: 0.5, high: 1.0}    # 샘플링 비율
    honest: true                                           # Honest 분할 (Causal inference 필수)
    
    # 피처 선택
    max_features: {type: "categorical", choices: ["sqrt", "log2", "auto"]}
    
    # 고정값
    random_state: 42
    n_jobs: -1

  # 하이퍼파라미터 튜닝 설정
  hyperparameter_tuning:
    enabled: true
    n_trials: 80                    # Causal Forest는 학습이 오래 걸림
    metric: "treatment_effect"      # Treatment effect로 최적화
    direction: "maximize"
  
  # Feature Store 기반 피처 증강
  augmenter:
    type: "feature_store"
    features:
      # 고객 가격 민감도
      - feature_namespace: "price_sensitivity"
        features: ["historical_discount_usage", "price_elasticity", "budget_segment"]
      
      # 상품 특성
      - feature_namespace: "product_characteristics"
        features: ["base_price", "margin", "competition_level", "seasonality"]
      
      # 시장 조건
      - feature_namespace: "market_conditions"
        features: ["competitor_pricing", "demand_index", "inventory_level"]
      
      # 고객 세분화
      - feature_namespace: "customer_segments"
        features: ["loyalty_tier", "purchase_frequency", "category_affinity"]

  # 전처리 설정
  preprocessor:
    name: "causal_preprocessor"
    params:
      criterion_col: null
      exclude_cols: ["customer_id", "product_category", "pricing_test_date", "purchase_probability", "discount_applied"]
      handle_missing: "median"
      scale_features: false        # Random Forest는 스케일링 불필요
      encode_categorical: "onehot"

  # 평가자 설정
  evaluator:
    name: "causal_evaluator"

# 평가 설정
evaluation:
  metrics:
    - "uplift_auc"
    - "uplift_at_k"
    - "qini_coefficient"
    - "treatment_effect"
  
  validation:
    method: "train_test_split"
    test_size: 0.2
    stratify: true
    random_state: 42
