# XGBoost T-Learner - Blueprint v17.0 Automated Excellence
# 🚀 Meta-Learning 기반 XGBoost를 활용한 고성능 인과효과 추정

# 1. 모델 기본 정보 (직접 동적 import)
class_path: "causalml.inference.meta.XGBTRegressor"

# 2. 데이터 로더 정의
loader:
  name: "causal_experiment_data"
  source_uri: "bq://recipes/sql/loader/causal_experiment_features.sql"
  local_override_uri: "file://local/data/sample_causal_experiment.csv"

# 3. 피처 증강기 정의 (🆕 Blueprint v17.0 - Feature Store 방식)
augmenter:
  type: "feature_store"
  features:
    # 사용자 기본 특성
    - feature_namespace: "user_demographics"
      features: ["age", "gender", "education_level", "income_bracket"]
    # 과거 행동 패턴
    - feature_namespace: "historical_behavior"
      features: ["past_purchases", "engagement_score", "loyalty_level"]
    # 실험 컨텍스트
    - feature_namespace: "experiment_context"
      features: ["channel", "timing", "seasonal_factor"]
    # 추가 T-Learner 피처
    - feature_namespace: "advanced_features"
      features: ["interaction_score", "network_effect", "recency_weighted_value"]

# 4. 전처리기 정의
preprocessor:
  name: "simple_scaler"
  params:
    criterion_col: null
    exclude_cols: ["user_id", "event_timestamp"]

# 5. 모델 인터페이스
data_interface:
  task_type: "causal"
  
  features:
    age: "numeric"
    gender: "category"
    education_level: "category"
    income_bracket: "category"
    past_purchases: "numeric"
    engagement_score: "numeric"
    loyalty_level: "category"
    channel: "category"
    timing: "category"
    seasonal_factor: "numeric"
    interaction_score: "numeric"
    network_effect: "numeric"
    recency_weighted_value: "numeric"
  
  target_col: "outcome"
  treatment_col: "treatment"
  treatment_value: "treated"

# 🆕 6. 하이퍼파라미터 (Dictionary 형식 + 자동 튜닝)
hyperparameters:
  # 🔥 자동 최적화 범위 (XGBoost T-Learner 특화)
  learning_rate: {type: "float", low: 0.01, high: 0.3, log: true}
  n_estimators: {type: "int", low: 100, high: 1000}
  max_depth: {type: "int", low: 3, high: 10}
  subsample: {type: "float", low: 0.6, high: 1.0}
  colsample_bytree: {type: "float", low: 0.6, high: 1.0}
  min_child_weight: {type: "int", low: 1, high: 10}
  gamma: {type: "float", low: 0.0, high: 1.0}
  reg_alpha: {type: "float", low: 0.0, high: 1.0}
  reg_lambda: {type: "float", low: 0.0, high: 1.0}
  
  # 🔧 고정값
  random_state: 42
  objective: "reg:squarederror"
  eval_metric: "rmse"

# 🆕 7. 하이퍼파라미터 튜닝 설정
hyperparameter_tuning:
  enabled: true
  n_trials: 100
  metric: "uplift_auc"
  direction: "maximize" 