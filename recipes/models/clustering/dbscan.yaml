# DBSCAN Clustering - Blueprint v17.0 Automated Excellence
# 🔍 밀도 기반의 노이즈 제거 및 임의 형태 클러스터 발견

# 1. 모델 기본 정보 (직접 동적 import)
class_path: "sklearn.cluster.DBSCAN"

# 2. 데이터 로더 정의
loader:
  name: "clustering_dataset"
  source_uri: "bq://recipes/sql/loader/clustering_features.sql"
  local_override_uri: "file://local/data/sample_clustering.csv"

# 3. 피처 증강기 정의 (🆕 Blueprint v17.0 - Feature Store 방식)
augmenter:
  type: "feature_store"
  features:
    # 사용자 행동 패턴
    - feature_namespace: "user_behavior"
      features: ["page_views", "session_duration", "click_rate"]
    # 구매 패턴
    - feature_namespace: "purchase_behavior"
      features: ["avg_order_value", "purchase_frequency"]
    # 위치 기반 피처 (DBSCAN에 적합)
    - feature_namespace: "location_features"
      features: ["latitude", "longitude", "region_density"]

# 4. 전처리기 정의 (DBSCAN에는 특히 중요)
preprocessor:
  name: "simple_scaler"
  params:
    criterion_col: null
    exclude_cols: ["user_id", "event_timestamp"]

# 5. 모델 인터페이스
data_interface:
  task_type: "clustering"
  
  features:
    page_views: "numeric"
    session_duration: "numeric"
    click_rate: "numeric"
    avg_order_value: "numeric"
    purchase_frequency: "numeric"
    latitude: "numeric"
    longitude: "numeric"
    region_density: "numeric"
  
  # 클러스터링 전용 설정
  true_labels_col: "true_cluster"  # 평가용 (선택적)

# 🆕 6. 하이퍼파라미터 (Dictionary 형식 + 자동 튜닝)
hyperparameters:
  # 🔥 자동 최적화 범위 (DBSCAN 특화)
  eps: {type: "float", low: 0.1, high: 2.0}
  min_samples: {type: "int", low: 3, high: 20}
  metric: {type: "categorical", choices: ["euclidean", "manhattan", "cosine"]}
  algorithm: {type: "categorical", choices: ["auto", "ball_tree", "kd_tree", "brute"]}
  
  # 🔧 고정값
  n_jobs: -1

# 🆕 7. 하이퍼파라미터 튜닝 설정
hyperparameter_tuning:
  enabled: true
  n_trials: 50
  metric: "calinski_harabasz_score"
  direction: "maximize" 