# K-Means Clustering - Blueprint v17.0 Automated Excellence
# 🎯 중심점 기반의 직관적이고 효율적인 클러스터링

# 1. 모델 기본 정보 (직접 동적 import)
class_path: "sklearn.cluster.KMeans"

# 2. 데이터 로더 정의
loader:
  name: "clustering_dataset"
  source_uri: "recipes/sql/loader/clustering_features.sql"

# 3. 피처 증강기 정의 (🆕 Blueprint v17.0 - Feature Store 방식)
augmenter:
  type: "feature_store"
  features:
    # 사용자 행동 패턴
    - feature_namespace: "user_behavior"
      features: ["page_views", "session_duration", "click_rate"]
    # 구매 패턴
    - feature_namespace: "purchase_behavior"
      features: ["avg_order_value", "purchase_frequency", "category_preference"]
    # 참여도 지표
    - feature_namespace: "engagement_metrics"
      features: ["login_frequency", "content_interaction", "social_sharing"]

# 4. 전처리기 정의 (클러스터링에는 특히 중요)
preprocessor:
  name: "simple_scaler"
  params:
    criterion_col: null
    exclude_cols: ["user_id", "event_timestamp"]

# 5. 모델 인터페이스
data_interface:
  task_type: "clustering"
  
  features:
    page_views: "numeric"
    session_duration: "numeric"
    click_rate: "numeric"
    avg_order_value: "numeric"
    purchase_frequency: "numeric"
    category_preference: "category"
    login_frequency: "numeric"
    content_interaction: "numeric"
    social_sharing: "numeric"
  
  # 클러스터링 전용 설정
  n_clusters: 5
  true_labels_col: "true_cluster"  # 평가용 (선택적)

# 🆕 6. 하이퍼파라미터 (Dictionary 형식 + 자동 튜닝)
hyperparameters:
  # 🔥 자동 최적화 범위 (K-Means 특화)
  n_clusters: {type: "int", low: 2, high: 10}
  init: {type: "categorical", choices: ["k-means++", "random"]}
  n_init: {type: "int", low: 10, high: 50}
  algorithm: {type: "categorical", choices: ["lloyd", "elkan"]}
  
  # 🔧 고정값
  random_state: 42
  max_iter: 300
  tol: 1e-4

# 🆕 7. 하이퍼파라미터 튜닝 설정
hyperparameter_tuning:
  enabled: true
  n_trials: 30
  metric: "silhouette_score"
  direction: "maximize" 