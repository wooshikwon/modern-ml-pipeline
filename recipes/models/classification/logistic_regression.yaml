# Logistic Regression - Blueprint v17.0 Automated Excellence
# 📊 간단하면서도 해석 가능한 선형 분류 모델의 정석

# 1. 모델 기본 정보 (직접 동적 import)
class_path: "sklearn.linear_model.LogisticRegression"

# 2. 데이터 로더 정의
loader:
  name: "classification_dataset"
  source_uri: "bq://recipes/sql/loader/classification_features.sql"
  local_override_uri: "file://local/data/sample_classification.csv"

# 3. 피처 증강기 정의 (🆕 Blueprint v17.0 - Feature Store 방식)
augmenter:
  type: "feature_store"
  features:
    # 사용자 기본 정보
    - feature_namespace: "user_demographics"
      features: ["age", "gender", "education_level", "income_bracket"]
    # 행동 패턴 피처
    - feature_namespace: "user_behavior"
      features: ["click_through_rate", "session_frequency", "avg_session_duration"]

# 4. 전처리기 정의 (로지스틱 회귀에는 특히 중요)
preprocessor:
  name: "simple_scaler"
  params:
    criterion_col: null
    exclude_cols: ["user_id", "event_timestamp"]

# 5. 모델 인터페이스
data_interface:
  task_type: "classification"
  
  features:
    age: "numeric"
    gender: "category"
    education_level: "category"
    income_bracket: "category"
    click_through_rate: "numeric"
    session_frequency: "numeric"
    avg_session_duration: "numeric"
  
  target_col: "target_class"
  class_weight: "balanced"
  average: "weighted"

# 🆕 6. 하이퍼파라미터 (Dictionary 형식 + 자동 튜닝)
hyperparameters:
  # 🔥 자동 최적화 범위
  C: {type: "float", low: 0.001, high: 100, log: true}
  penalty: {type: "categorical", choices: ["l1", "l2", "elasticnet"]}
  solver: {type: "categorical", choices: ["liblinear", "saga", "lbfgs"]}
  l1_ratio: {type: "float", low: 0.0, high: 1.0}  # elasticnet용
  
  # 🔧 고정값
  random_state: 42
  max_iter: 1000
  class_weight: "balanced"

# 🆕 7. 하이퍼파라미터 튜닝 설정
hyperparameter_tuning:
  enabled: true
  n_trials: 50
  metric: "roc_auc"      # AUC로 최적화
  direction: "maximize" 