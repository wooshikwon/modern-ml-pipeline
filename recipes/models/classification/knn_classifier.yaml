# KNN Classifier: 단순함 속의 지혜
# 🎯 최근접 이웃의 힘으로 지역적 패턴을 완벽하게 포착

name: "knn_classifier"

model:
  # Scikit-learn KNN Classifier 직접 동적 import
  class_path: "sklearn.neighbors.KNeighborsClassifier"
  
  # Phase 1: Point-in-Time 정합성 스키마
  loader:
    name: "wine_quality_loader"
    source_uri: "data/wine_quality.csv"
    adapter: storage
    entity_schema:
      entity_columns: ["fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar", "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide", "density", "pH", "sulphates", "alcohol"]
      timestamp_column: "timestamp"
  
  # 기존: ML 작업별 세부 설정 (Classification 전용)
  data_interface:
    task_type: "classification"
    target_column: "user_preference"     # 사용자 선호도 (좋아요/싫어요/중립)
    class_weight: "balanced"             # 다중 클래스 균형
    average: "weighted"
    
  # Dictionary 형태 하이퍼파라미터 (KNN 특화)
  hyperparameters:
    # 이웃 수 (KNN의 핵심)
    n_neighbors: {type: "int", low: 3, high: 50}
    
    # 거리 계산 방법
    metric: {type: "categorical", choices: ["euclidean", "manhattan", "minkowski", "cosine"]}
    
    # 가중치 방법
    weights: {type: "categorical", choices: ["uniform", "distance"]}
    
    # Minkowski 거리 파라미터
    p: {type: "int", low: 1, high: 3}              # 1: 맨하탄, 2: 유클리드
    
    # 알고리즘 선택
    algorithm: {type: "categorical", choices: ["auto", "ball_tree", "kd_tree", "brute"]}
    
    # 리프 크기 (트리 알고리즘용)
    leaf_size: {type: "int", low: 10, high: 50}

  # 하이퍼파라미터 튜닝 설정
  hyperparameter_tuning:
    enabled: true
    n_trials: 50                      # KNN은 단순하므로 적은 trial
    metric: "f1_weighted"
    direction: "maximize"
  
  # Feature Store 기반 피처 증강
  augmenter:
    type: "feature_store"
    features:
      # 사용자 행동 벡터
      - feature_namespace: "user_behavior_vector"
        features: ["click_rate", "purchase_rate", "time_spent", "return_rate"]
      
      # 제품 특성 벡터
      - feature_namespace: "product_feature_vector"
        features: ["price_normalized", "rating_score", "popularity_index", "category_affinity"]
      
      # 상호작용 컨텍스트
      - feature_namespace: "interaction_context"
        features: ["session_position", "time_of_day", "device_type", "season"]
      
      # 유사도 기반 피처
      - feature_namespace: "similarity_features"
        features: ["user_similarity_avg", "product_similarity_avg", "collaborative_score"]

  # 전처리 설정 (KNN은 스케일링 필수!)
  preprocessor:
    name: "classification_preprocessor"
    params:
      criterion_col: null
      exclude_cols: ["user_id", "product_category", "interaction_time", "user_preference"]
      handle_missing: "median"
      scale_features: true             # KNN은 거리 기반이므로 스케일링 필수
      encode_categorical: "onehot"     # One-hot encoding for distance calculation

  # 평가자 설정
  evaluator:
    name: "classification_evaluator"

# 평가 설정
evaluation:
  metrics:
    - "accuracy"
    - "precision_weighted"
    - "recall_weighted"
    - "f1_weighted"
    - "roc_auc"                        # 다중분류의 경우 macro-average
  
  validation:
    method: "train_test_split"
    test_size: 0.2
    stratify: true
    random_state: 42
