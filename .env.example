# =============================================================================
# .env.example - Modern ML Pipeline 환경변수 설정 예시
# =============================================================================
# 
# 🎯 이 파일을 .env로 복사하고 실제 값으로 변경하세요
# cp .env.example .env
#
# ⚠️  중요: .env 파일은 절대 git에 커밋하지 마세요 (이미 .gitignore에 포함됨)
# 
# 📋 지원하는 인프라:
# - Google Cloud Platform (BigQuery, GCS, Cloud SQL)
# - Amazon Web Services (S3, RDS, DynamoDB)
# - Microsoft Azure (Blob Storage, Synapse, Cosmos DB)
# - On-premise (PostgreSQL, Redis, etc.)
# - Hybrid 환경 조합
# =============================================================================

# 🏠 기본 실행 환경
APP_ENV=local  # local/dev/staging/prod

# =============================================================================
# 📊 MLflow 설정 - 실험 추적 및 모델 레지스트리
# =============================================================================

# 로컬 파일 모드 (기본값) - 아래 주석 그대로 두면 ./mlruns 사용
# MLFLOW_TRACKING_URI=./mlruns

# MLflow 서버 연결 (팀 공유 또는 클라우드)
# MLFLOW_TRACKING_URI=http://localhost:5002
# MLFLOW_TRACKING_URI=https://mlflow.company.com
# MLFLOW_TRACKING_URI=https://mlflow-production.run.app

# 실험명 (선택사항)
# MLFLOW_EXPERIMENT_NAME=My-ML-Experiments

# =============================================================================
# 🐘 PostgreSQL 데이터베이스 연결
# =============================================================================

# 로컬 PostgreSQL
# POSTGRES_HOST=localhost
# POSTGRES_PORT=5432
# POSTGRES_USER=postgres
# POSTGRES_PASSWORD=your-password
# POSTGRES_DB=ml_pipeline

# mmp-local-dev 연동 (개발 환경)
# POSTGRES_HOST=localhost
# POSTGRES_PORT=5432
# POSTGRES_USER=postgres  
# POSTGRES_PASSWORD=postgres
# POSTGRES_DB=mlflow

# 클라우드 PostgreSQL (Google Cloud SQL 예시)
# POSTGRES_HOST=10.1.2.3  # Private IP
# POSTGRES_PORT=5432
# POSTGRES_USER=ml-service-account
# POSTGRES_PASSWORD=your-cloud-sql-password
# POSTGRES_DB=ml_production

# 연결 문자열로 직접 설정 (고급)
# DATABASE_URL=postgresql://user:password@host:5432/database

# =============================================================================
# ⚡ Redis 연결 (Feature Store Online Store)
# =============================================================================

# 로컬 Redis
# REDIS_HOST=localhost
# REDIS_PORT=6379
# REDIS_PASSWORD=  # 패스워드 없으면 빈 문자열

# mmp-local-dev 연동
# REDIS_HOST=localhost
# REDIS_PORT=6379

# 클라우드 Redis (Google Cloud Memorystore 예시)
# REDIS_HOST=10.1.2.4
# REDIS_PORT=6379  
# REDIS_PASSWORD=your-redis-password

# Redis 연결 문자열로 직접 설정 (고급)
# REDIS_CONNECTION_STRING=redis://localhost:6379
# REDIS_CONNECTION_STRING=redis://:password@redis.company.com:6379
# REDIS_CONNECTION_STRING=rediss://user:password@secure-redis.cloud:6380  # SSL

# =============================================================================
# ☁️ Google Cloud Platform 설정
# =============================================================================

# GCP 프로젝트 및 서비스 계정 (BigQuery, GCS 사용시)
# GCP_PROJECT_ID=my-ml-project
# GCS_BUCKET=my-ml-artifacts-bucket

# 서비스 계정 키 파일 경로 (권장: Application Default Credentials 사용)
# GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account-key.json
# GCS_SERVICE_ACCOUNT_KEY=/path/to/gcs-service-account.json

# BigQuery 설정
# BIGQUERY_DATASET=ml_pipeline_data
# BIGQUERY_LOCATION=US

# =============================================================================
# ☁️ Amazon Web Services 설정  
# =============================================================================

# AWS 자격 증명 (권장: IAM Role 사용)
# AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
# AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
# AWS_REGION=us-east-1
# AWS_DEFAULT_REGION=us-east-1

# S3 버킷
# S3_BUCKET=my-ml-data-bucket
# S3_ARTIFACTS_BUCKET=my-ml-artifacts-bucket

# DynamoDB (Feature Store Online Store)
# DYNAMODB_TABLE_NAME=feast_online_store
# DYNAMODB_REGION=us-east-1

# RDS (PostgreSQL on AWS)
# RDS_ENDPOINT=my-db.abcdefg.us-east-1.rds.amazonaws.com
# RDS_PORT=5432
# RDS_USERNAME=postgres
# RDS_PASSWORD=your-rds-password
# RDS_DATABASE=ml_pipeline

# =============================================================================
# 🔵 Microsoft Azure 설정
# =============================================================================

# Azure 스토리지 계정
# AZURE_STORAGE_ACCOUNT=mystorageaccount
# AZURE_STORAGE_KEY=your-long-storage-account-key
# AZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=https;AccountName=mystorageaccount;AccountKey=your-key;EndpointSuffix=core.windows.net

# Azure Blob 컨테이너
# AZURE_BLOB_CONTAINER=ml-data

# Azure Synapse (Data Warehouse)
# AZURE_SYNAPSE_ENDPOINT=mysynapse.sql.azuresynapse.net
# AZURE_SQL_USER=sqladmin
# AZURE_SQL_PASSWORD=your-synapse-password
# AZURE_SQL_DATABASE=ml_warehouse

# Azure Cosmos DB (Feature Store Online Store)
# COSMOSDB_CONNECTION_STRING=AccountEndpoint=https://mycosmosdb.documents.azure.com:443/;AccountKey=your-key;

# =============================================================================
# ❄️ Snowflake 설정 (Multi-cloud Data Warehouse)
# =============================================================================

# Snowflake 계정 정보
# SNOWFLAKE_ACCOUNT=myaccount.region
# SNOWFLAKE_USER=ml_service_user
# SNOWFLAKE_PASSWORD=your-snowflake-password
# SNOWFLAKE_DATABASE=ML_PIPELINE
# SNOWFLAKE_SCHEMA=FEATURES
# SNOWFLAKE_WAREHOUSE=COMPUTE_WH
# SNOWFLAKE_ROLE=ML_ROLE

# =============================================================================
# 🍽️ Feast Feature Store 설정
# =============================================================================

# Feast 레지스트리 경로 (Feature definitions 저장소)
# FEAST_REGISTRY_PATH=/path/to/feast/registry.db
# FEAST_REGISTRY_PATH=gs://my-bucket/feast/registry.db  # GCS
# FEAST_REGISTRY_PATH=s3://my-bucket/feast/registry.db  # S3

# Feast 프로젝트명
# FEAST_PROJECT=ml_pipeline

# =============================================================================
# 🔐 API 키 및 외부 서비스 인증
# =============================================================================

# 서드파티 API 키들
# OPENAI_API_KEY=sk-your-openai-api-key
# HUGGINGFACE_API_KEY=hf_your-huggingface-token
# WANDB_API_KEY=your-wandb-api-key

# 사내 API 인증
# INTERNAL_API_KEY=your-internal-service-api-key  
# INTERNAL_API_ENDPOINT=https://api.company.com

# =============================================================================
# 🔧 고급 설정 (선택사항)
# =============================================================================

# Python 경로 (필요시)
# PYTHONPATH=/path/to/modern-ml-pipeline/src

# 로그 레벨
# LOG_LEVEL=INFO  # DEBUG/INFO/WARNING/ERROR

# Optuna 최적화 DB (하이퍼파라미터 튜닝)
# OPTUNA_DB_URL=sqlite:///optuna.db
# OPTUNA_DB_URL=postgresql://user:password@host:5432/optuna_db

# 병렬 처리 설정
# N_JOBS=4  # CPU 코어 수에 맞게 조정
# JOBLIB_TEMP_FOLDER=/tmp/joblib

# 캐시 설정
# CACHE_DIRECTORY=/tmp/ml_cache
# ENABLE_CACHE=true

# =============================================================================
# 🏭 운영 환경 전용 설정
# =============================================================================

# 보안 설정 (PROD 환경에서만)
# API_SECRET_KEY=your-super-secret-api-key-32-chars
# JWT_SECRET_KEY=your-jwt-secret-for-authentication  
# ENCRYPTION_KEY=your-data-encryption-key

# 모니터링 (PROD 환경에서만)
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
# DATADOG_API_KEY=your-datadog-api-key
# NEWRELIC_LICENSE_KEY=your-newrelic-license

# 알림 설정 (PROD 환경에서만)
# SLACK_WEBHOOK_URL=https://hooks.slack.com/services/your/webhook/url
# PAGERDUTY_API_KEY=your-pagerduty-integration-key
# EMAIL_SMTP_HOST=smtp.company.com
# EMAIL_SMTP_USER=alerts@company.com
# EMAIL_SMTP_PASSWORD=your-smtp-password

# =============================================================================
# 💡 사용 팁:
# =============================================================================
#
# 🚀 빠른 시작 (로컬 모드):
#   1. 이 파일을 .env로 복사: cp .env.example .env
#   2. APP_ENV=local로 설정 (기본값)
#   3. modern-ml-pipeline train --recipe-file recipes/local_test.yaml
#
# 🔧 개발 환경 (mmp-local-dev 연동):
#   1. APP_ENV=dev로 설정
#   2. POSTGRES/REDIS 설정을 mmp-local-dev에 맞게 설정
#   3. MLFLOW_TRACKING_URI=http://localhost:5002
#
# ☁️ 클라우드 환경:
#   1. APP_ENV=prod로 설정  
#   2. 클라우드 서비스 계정 또는 IAM Role 설정 (권장)
#   3. 환경변수 대신 클라우드 네이티브 비밀 관리 서비스 사용
#
# 🔒 보안 주의사항:
#   - .env 파일은 절대 git에 커밋하지 말 것
#   - 운영 환경에서는 환경변수나 비밀 관리 서비스 사용
#   - API 키와 패스워드는 정기적으로 교체
#   - 최소 권한 원칙 적용 (필요한 권한만 부여)
#
# 🧪 테스트 환경변수 확인:
#   modern-ml-pipeline self-check
#
# =============================================================================