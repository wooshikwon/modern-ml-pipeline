name: "MMP Test Pipeline (Refactored)"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: "📋 Code Quality & Architecture"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run Ruff linting
        run: |
          uv run ruff check --output-format=github .

      - name: Check removed CLI components don't exist
        run: |
          # 삭제된 파일들이 없는지 확인
          ! test -f "tests/unit/cli/test_enhanced_validate.py" || (echo "❌ 삭제 대상 파일이 여전히 존재합니다" && exit 1)
          ! test -f "tests/unit/cli/test_health_check.py" || (echo "❌ 삭제 대상 파일이 여전히 존재합니다" && exit 1)
          ! test -f "src/cli/project_templates/guideline_recipe.yaml.j2" || (echo "❌ 삭제 대상 파일이 여전히 존재합니다" && exit 1)
          echo "✅ 모든 삭제 대상 파일이 올바르게 제거되었습니다"

      - name: Validate new CLI structure
        run: |
          # 새로운 CLI 구조 검증
          test -d "src/cli/commands/" || (echo "❌ 새로운 CLI commands 디렉토리가 없습니다" && exit 1)
          test -d "src/cli/utils/" || (echo "❌ 새로운 CLI utils 디렉토리가 없습니다" && exit 1)
          test -d "src/cli/recipe_templates/" || (echo "❌ 새로운 recipe_templates 디렉토리가 없습니다" && exit 1)
          echo "✅ 새로운 CLI 구조가 올바르게 생성되었습니다"

      - name: Run import linter (Architecture validation)
        run: |
          uv run lint-imports

  unit-tests:
    name: "🧪 Unit Tests (Refactored)"
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run unit tests (excluding removed components)
        run: |
          # 삭제된 CLI 컴포넌트 테스트를 제외하고 실행
          uv run pytest -m "unit and not requires_dev_stack" \
            --ignore=tests/unit/cli/test_enhanced_validate.py \
            --ignore=tests/unit/cli/test_health_check.py \
            --tb=short \
            --disable-warnings \
            --maxfail=5 \
            -v

  new-cli-tests:
    name: "🆕 New CLI Components Tests"
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Test new init command
        run: |
          # init 명령어 기본 동작 테스트
          uv run pytest tests/unit/cli/test_init_refactored.py -v

      - name: Test new system-check command
        run: |
          # system-check 명령어 테스트
          uv run pytest tests/unit/cli/test_system_check.py -v

      - name: Test model catalog validation
        run: |
          # catalog.yaml 기반 검증 테스트
          uv run pytest tests/unit/settings/test_model_catalog.py -v

      - name: Test registry-based evaluation metrics
        run: |
          # Registry 기반 evaluation metrics 테스트
          uv run pytest tests/unit/cli/test_registry_evaluation_metrics.py -v

  integration-tests-basic:
    name: "🔗 Integration Tests (No DEV Stack)"
    runs-on: ubuntu-latest
    needs: new-cli-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run integration tests (basic)
        run: |
          # 삭제된 contract 테스트 제외하고 실행
          uv run pytest -m "integration and not requires_dev_stack" \
            --ignore=tests/integration/test_dev_contract.py \
            --tb=short \
            --disable-warnings \
            --maxfail=3 \
            -v

  blueprint-validation-refactored:
    name: "📐 Blueprint Principles (Refactored)"
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Validate Blueprint Principle 1 (Recipe-Config Separation)
        run: |
          # 기존 Blueprint 테스트 유지 (CLI와 무관)
          uv run pytest -m "blueprint_principle_1" --tb=short -v

      - name: Validate Blueprint Principle 3 (Declarative Pipeline) 
        run: |
          # 기존 Blueprint 테스트 유지
          uv run pytest -m "blueprint_principle_3" --tb=short -v

      - name: Validate Blueprint Principle 4 (Modularity & Extensibility)
        run: |
          # 기존 Blueprint 테스트 유지
          uv run pytest -m "blueprint_principle_4" --tb=short -v

      - name: Validate New CLI Architecture
        run: |
          # 새로운 CLI 아키텍처 검증
          echo "🔍 새로운 CLI 아키텍처 검증..."
          # Template 개수 검증 (현재는 1개 동적 템플릿)
          template_count=$(find src/cli/recipe_templates -name "*.j2" | wc -l)
          if [ "$template_count" -ge 1 ]; then
            echo "✅ Template 구조 올바름: $template_count 개 템플릿 발견"
          else
            echo "❌ Template 구조 오류: 템플릿이 발견되지 않음"
            exit 1
          fi
          
          # Model catalog 검증
          model_count=$(grep -c "class_path:" src/models/catalog.yaml)
          if [ "$model_count" -eq 29 ]; then
            echo "✅ Model catalog 개수 올바름: 29개"
          else
            echo "❌ Model catalog 개수 오류: 예상 29개, 실제 $model_count 개"
            exit 1
          fi

  test-summary:
    name: "📊 Test Summary (Refactored)"
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, new-cli-tests, integration-tests-basic, blueprint-validation-refactored]
    if: always()
    steps:
      - name: Test Results Summary
        run: |
          echo "## 🎯 Refactored Test Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality & Architecture | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests (Refactored) | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| New CLI Components Tests | ${{ needs.new-cli-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests (Basic) | ${{ needs.integration-tests-basic.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Blueprint Validation (Refactored) | ${{ needs.blueprint-validation-refactored.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Refactoring Validation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Removed deprecated CLI components (validate, guide, self-check, test-contract)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Added new CLI structure (init, get-recipe, system-check)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Validated model catalog and registry-based metrics" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Blueprint principles maintained with new architecture" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 New Features Tested" >> $GITHUB_STEP_SUMMARY
          echo "- Model catalog validation with Pydantic integration" >> $GITHUB_STEP_SUMMARY
          echo "- Config-based dynamic system checking" >> $GITHUB_STEP_SUMMARY
          echo "- Registry-based evaluation metrics" >> $GITHUB_STEP_SUMMARY
          echo "- Simplified project initialization (init)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- For DEV stack tests: Run manually triggered workflow" >> $GITHUB_STEP_SUMMARY
          echo "- CLI Refactoring Phase 5 완료: **Zero-to-ML in 2 Minutes** 달성!" >> $GITHUB_STEP_SUMMARY