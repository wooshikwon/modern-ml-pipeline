# 전체 파이프라인 분석 기반 최종 Classification Recipe
# Mock 데이터 시스템 + LOCAL 환경 최적화

name: "final_classification_test"

model:
  # Scikit-learn Logistic Regression (확실히 동작하는 모델)
  class_path: "sklearn.linear_model.LogisticRegression"
  
  # Phase 1: Point-in-Time 정합성 스키마 (Factory에서 필요)
  loader:
    name: "local_test_data_loader"
    source_uri: "tests/fixtures/sql/loaders/local_test_data.sql"
    adapter: sql
    entity_schema:
      entity_columns: ["user_id"]
      timestamp_column: "event_timestamp"
  
  # ML 작업별 세부 설정 (Trainer.validate_required_fields에서 필요)
  data_interface:
    task_type: "classification"
    target_column: "outcome"
    class_weight: "balanced"
    average: "weighted"
    
  # 단순한 Dict 형태 하이퍼파라미터 (Factory._extract_hyperparameters에서 지원)
  hyperparameters:
    C: 1.0
    max_iter: 100
    random_state: 42
    
  # 하이퍼파라미터 튜닝 설정 (Trainer.train에서 확인)
  hyperparameter_tuning:
    enabled: false  # LOCAL에서는 빠른 테스트용

  # fetcher 설정 (Factory.create_fetcher - LOCAL에서 자동 PassThrough)
  fetcher:
    type: "feature_store"
    features:
      - feature_namespace: "dummy"  # Pydantic 검증용
        features: ["dummy_feature"]

  # Preprocessor 설정 (Factory.create_preprocessor에서 필요)
  preprocessor:
    name: "classification_preprocessor"
    params:
      exclude_cols: ["user_id", "product_id", "event_timestamp"]  # PK와 timestamp는 학습에서 제외
      handle_missing: "mean"
      scale_features: true
      encode_categorical: "none"

  # Evaluator 설정 (Factory.create_evaluator에서 task_type 기반 생성)
  evaluator:
    name: "classification_evaluator"
    
# 평가 설정 (RecipeSettings.validate_recipe_consistency에서 검증)
evaluation:
  metrics: ["accuracy", "precision_weighted", "recall_weighted", "f1_weighted"]  # Pydantic 검증된 메트릭들
  validation:
    method: "train_test_split"
    test_size: 0.2
    random_state: 42
    
# 메타데이터 (선택적)
metadata:
  description: "전체 파이프라인 분석 기반 최종 Classification Recipe"
  use_cases: ["E2E 테스트", "파이프라인 검증"] 